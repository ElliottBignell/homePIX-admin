package com.elliottbignell.homepix.innodb.innodb.homepix_albumcontent.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_albumcontent.HomePixAlbumcontent;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.homepix_albumcontent.HomePixAlbumcontent}-interface
 * representing entities of the {@code homePIX_albumcontent}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedHomePixAlbumcontent {
    
    /**
     * This Field corresponds to the {@link HomePixAlbumcontent} field that can
     * be obtained using the {@link HomePixAlbumcontent#getId()} method.
     */
    ComparableField<HomePixAlbumcontent, Short, Short> ID = DatastoreFields.createComparableField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        HomePixAlbumcontent::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixAlbumcontent} field that can
     * be obtained using the {@link HomePixAlbumcontent#getAlbumId()} method.
     */
    ComparableField<HomePixAlbumcontent, Byte, Byte> ALBUM_ID = DatastoreFields.createComparableField(
        Identifier.ALBUM_ID,
        o -> OptionalUtil.unwrap(o.getAlbumId()),
        HomePixAlbumcontent::setAlbumId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixAlbumcontent} field that can
     * be obtained using the {@link HomePixAlbumcontent#getEntryId()} method.
     */
    ComparableField<HomePixAlbumcontent, Integer, Integer> ENTRY_ID = DatastoreFields.createComparableField(
        Identifier.ENTRY_ID,
        o -> OptionalUtil.unwrap(o.getEntryId()),
        HomePixAlbumcontent::setEntryId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this HomePixAlbumcontent. The id field corresponds to
     * the database column innodb.innodb.homePIX_albumcontent.id.
     * 
     * @return the id of this HomePixAlbumcontent
     */
    Optional<Short> getId();
    
    /**
     * Returns the albumId of this HomePixAlbumcontent. The albumId field
     * corresponds to the database column
     * innodb.innodb.homePIX_albumcontent.album_id.
     * 
     * @return the albumId of this HomePixAlbumcontent
     */
    Optional<Byte> getAlbumId();
    
    /**
     * Returns the entryId of this HomePixAlbumcontent. The entryId field
     * corresponds to the database column
     * innodb.innodb.homePIX_albumcontent.entry_id.
     * 
     * @return the entryId of this HomePixAlbumcontent
     */
    OptionalInt getEntryId();
    
    /**
     * Sets the id of this HomePixAlbumcontent. The id field corresponds to the
     * database column innodb.innodb.homePIX_albumcontent.id.
     * 
     * @param id to set of this HomePixAlbumcontent
     * @return   this HomePixAlbumcontent instance
     */
    HomePixAlbumcontent setId(Short id);
    
    /**
     * Sets the albumId of this HomePixAlbumcontent. The albumId field
     * corresponds to the database column
     * innodb.innodb.homePIX_albumcontent.album_id.
     * 
     * @param albumId to set of this HomePixAlbumcontent
     * @return        this HomePixAlbumcontent instance
     */
    HomePixAlbumcontent setAlbumId(Byte albumId);
    
    /**
     * Sets the entryId of this HomePixAlbumcontent. The entryId field
     * corresponds to the database column
     * innodb.innodb.homePIX_albumcontent.entry_id.
     * 
     * @param entryId to set of this HomePixAlbumcontent
     * @return        this HomePixAlbumcontent instance
     */
    HomePixAlbumcontent setEntryId(Integer entryId);
    
    enum Identifier implements ColumnIdentifier<HomePixAlbumcontent> {
        
        ID       ("id"),
        ALBUM_ID ("album_id"),
        ENTRY_ID ("entry_id");
        
        private final String columnId;
        private final TableIdentifier<HomePixAlbumcontent> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "homePIX_albumcontent";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<HomePixAlbumcontent> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}