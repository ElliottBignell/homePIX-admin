package com.elliottbignell.homepix.innodb.innodb.albumview.generated;

import com.elliottbignell.homepix.innodb.innodb.albumview.AlbumView;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.albumview.AlbumView}-interface
 * representing entities of the {@code AlbumView}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAlbumView {
    
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getId()} method.
     */
    ComparableField<AlbumView, Short, Short> ID = DatastoreFields.createComparableField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        AlbumView::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getAlbumId()} method.
     */
    ComparableField<AlbumView, Byte, Byte> ALBUM_ID = DatastoreFields.createComparableField(
        Identifier.ALBUM_ID,
        o -> OptionalUtil.unwrap(o.getAlbumId()),
        AlbumView::setAlbumId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getEntryId()} method.
     */
    ComparableField<AlbumView, Integer, Integer> ENTRY_ID = DatastoreFields.createComparableField(
        Identifier.ENTRY_ID,
        o -> OptionalUtil.unwrap(o.getEntryId()),
        AlbumView::setEntryId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getId1()} method.
     */
    ComparableField<AlbumView, Integer, Integer> ID1 = DatastoreFields.createComparableField(
        Identifier.ID1,
        o -> OptionalUtil.unwrap(o.getId1()),
        AlbumView::setId1,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getFile()} method.
     */
    StringField<AlbumView, String> FILE = DatastoreFields.createStringField(
        Identifier.FILE,
        o -> OptionalUtil.unwrap(o.getFile()),
        AlbumView::setFile,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getTitle()} method.
     */
    StringField<AlbumView, String> TITLE = DatastoreFields.createStringField(
        Identifier.TITLE,
        o -> OptionalUtil.unwrap(o.getTitle()),
        AlbumView::setTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getSortkey()} method.
     */
    StringField<AlbumView, String> SORTKEY = DatastoreFields.createStringField(
        Identifier.SORTKEY,
        o -> OptionalUtil.unwrap(o.getSortkey()),
        AlbumView::setSortkey,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getAddedOn()} method.
     */
    StringField<AlbumView, String> ADDED_ON = DatastoreFields.createStringField(
        Identifier.ADDED_ON,
        o -> OptionalUtil.unwrap(o.getAddedOn()),
        AlbumView::setAddedOn,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getTakenOn()} method.
     */
    StringField<AlbumView, String> TAKEN_ON = DatastoreFields.createStringField(
        Identifier.TAKEN_ON,
        o -> OptionalUtil.unwrap(o.getTakenOn()),
        AlbumView::setTakenOn,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getLastModified()} method.
     */
    StringField<AlbumView, String> LAST_MODIFIED = DatastoreFields.createStringField(
        Identifier.LAST_MODIFIED,
        o -> OptionalUtil.unwrap(o.getLastModified()),
        AlbumView::setLastModified,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getLocation()} method.
     */
    StringField<AlbumView, String> LOCATION = DatastoreFields.createStringField(
        Identifier.LOCATION,
        o -> OptionalUtil.unwrap(o.getLocation()),
        AlbumView::setLocation,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getPrimaryCategory()} method.
     */
    StringField<AlbumView, String> PRIMARY_CATEGORY = DatastoreFields.createStringField(
        Identifier.PRIMARY_CATEGORY,
        o -> OptionalUtil.unwrap(o.getPrimaryCategory()),
        AlbumView::setPrimaryCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getSecondaryCategory()} method.
     */
    StringField<AlbumView, String> SECONDARY_CATEGORY = DatastoreFields.createStringField(
        Identifier.SECONDARY_CATEGORY,
        o -> OptionalUtil.unwrap(o.getSecondaryCategory()),
        AlbumView::setSecondaryCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getKeywordsId()} method.
     */
    StringField<AlbumView, String> KEYWORDS_ID = DatastoreFields.createStringField(
        Identifier.KEYWORDS_ID,
        o -> OptionalUtil.unwrap(o.getKeywordsId()),
        AlbumView::setKeywordsId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getPathId()} method.
     */
    ComparableField<AlbumView, Short, Short> PATH_ID = DatastoreFields.createComparableField(
        Identifier.PATH_ID,
        o -> OptionalUtil.unwrap(o.getPathId()),
        AlbumView::setPathId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getHits()} method.
     */
    ComparableField<AlbumView, Byte, Byte> HITS = DatastoreFields.createComparableField(
        Identifier.HITS,
        o -> OptionalUtil.unwrap(o.getHits()),
        AlbumView::setHits,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getId2()} method.
     */
    ComparableField<AlbumView, Byte, Byte> ID2 = DatastoreFields.createComparableField(
        Identifier.ID2,
        o -> OptionalUtil.unwrap(o.getId2()),
        AlbumView::setId2,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getName()} method.
     */
    StringField<AlbumView, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        AlbumView::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getCount()} method.
     */
    ComparableField<AlbumView, Byte, Byte> COUNT = DatastoreFields.createComparableField(
        Identifier.COUNT,
        o -> OptionalUtil.unwrap(o.getCount()),
        AlbumView::setCount,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getThumbnailId()} method.
     */
    ComparableField<AlbumView, Integer, Integer> THUMBNAIL_ID = DatastoreFields.createComparableField(
        Identifier.THUMBNAIL_ID,
        o -> OptionalUtil.unwrap(o.getThumbnailId()),
        AlbumView::setThumbnailId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AlbumView} field that can be
     * obtained using the {@link AlbumView#getHits1()} method.
     */
    ComparableField<AlbumView, Byte, Byte> HITS1 = DatastoreFields.createComparableField(
        Identifier.HITS1,
        o -> OptionalUtil.unwrap(o.getHits1()),
        AlbumView::setHits1,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AlbumView. The id field corresponds to the
     * database column innodb.innodb.AlbumView.id.
     * 
     * @return the id of this AlbumView
     */
    Optional<Short> getId();
    
    /**
     * Returns the albumId of this AlbumView. The albumId field corresponds to
     * the database column innodb.innodb.AlbumView.album_id.
     * 
     * @return the albumId of this AlbumView
     */
    Optional<Byte> getAlbumId();
    
    /**
     * Returns the entryId of this AlbumView. The entryId field corresponds to
     * the database column innodb.innodb.AlbumView.entry_id.
     * 
     * @return the entryId of this AlbumView
     */
    OptionalInt getEntryId();
    
    /**
     * Returns the id1 of this AlbumView. The id1 field corresponds to the
     * database column innodb.innodb.AlbumView.id:1.
     * 
     * @return the id1 of this AlbumView
     */
    OptionalInt getId1();
    
    /**
     * Returns the file of this AlbumView. The file field corresponds to the
     * database column innodb.innodb.AlbumView.file.
     * 
     * @return the file of this AlbumView
     */
    Optional<String> getFile();
    
    /**
     * Returns the title of this AlbumView. The title field corresponds to the
     * database column innodb.innodb.AlbumView.title.
     * 
     * @return the title of this AlbumView
     */
    Optional<String> getTitle();
    
    /**
     * Returns the sortkey of this AlbumView. The sortkey field corresponds to
     * the database column innodb.innodb.AlbumView.sortkey.
     * 
     * @return the sortkey of this AlbumView
     */
    Optional<String> getSortkey();
    
    /**
     * Returns the addedOn of this AlbumView. The addedOn field corresponds to
     * the database column innodb.innodb.AlbumView.added_on.
     * 
     * @return the addedOn of this AlbumView
     */
    Optional<String> getAddedOn();
    
    /**
     * Returns the takenOn of this AlbumView. The takenOn field corresponds to
     * the database column innodb.innodb.AlbumView.taken_on.
     * 
     * @return the takenOn of this AlbumView
     */
    Optional<String> getTakenOn();
    
    /**
     * Returns the lastModified of this AlbumView. The lastModified field
     * corresponds to the database column innodb.innodb.AlbumView.last_modified.
     * 
     * @return the lastModified of this AlbumView
     */
    Optional<String> getLastModified();
    
    /**
     * Returns the location of this AlbumView. The location field corresponds to
     * the database column innodb.innodb.AlbumView.location.
     * 
     * @return the location of this AlbumView
     */
    Optional<String> getLocation();
    
    /**
     * Returns the primaryCategory of this AlbumView. The primaryCategory field
     * corresponds to the database column
     * innodb.innodb.AlbumView.primaryCategory.
     * 
     * @return the primaryCategory of this AlbumView
     */
    Optional<String> getPrimaryCategory();
    
    /**
     * Returns the secondaryCategory of this AlbumView. The secondaryCategory
     * field corresponds to the database column
     * innodb.innodb.AlbumView.secondaryCategory.
     * 
     * @return the secondaryCategory of this AlbumView
     */
    Optional<String> getSecondaryCategory();
    
    /**
     * Returns the keywordsId of this AlbumView. The keywordsId field
     * corresponds to the database column innodb.innodb.AlbumView.keywords_id.
     * 
     * @return the keywordsId of this AlbumView
     */
    Optional<String> getKeywordsId();
    
    /**
     * Returns the pathId of this AlbumView. The pathId field corresponds to the
     * database column innodb.innodb.AlbumView.path_id.
     * 
     * @return the pathId of this AlbumView
     */
    Optional<Short> getPathId();
    
    /**
     * Returns the hits of this AlbumView. The hits field corresponds to the
     * database column innodb.innodb.AlbumView.hits.
     * 
     * @return the hits of this AlbumView
     */
    Optional<Byte> getHits();
    
    /**
     * Returns the id2 of this AlbumView. The id2 field corresponds to the
     * database column innodb.innodb.AlbumView.id:2.
     * 
     * @return the id2 of this AlbumView
     */
    Optional<Byte> getId2();
    
    /**
     * Returns the name of this AlbumView. The name field corresponds to the
     * database column innodb.innodb.AlbumView.name.
     * 
     * @return the name of this AlbumView
     */
    Optional<String> getName();
    
    /**
     * Returns the count of this AlbumView. The count field corresponds to the
     * database column innodb.innodb.AlbumView.count.
     * 
     * @return the count of this AlbumView
     */
    Optional<Byte> getCount();
    
    /**
     * Returns the thumbnailId of this AlbumView. The thumbnailId field
     * corresponds to the database column innodb.innodb.AlbumView.thumbnail_id.
     * 
     * @return the thumbnailId of this AlbumView
     */
    OptionalInt getThumbnailId();
    
    /**
     * Returns the hits1 of this AlbumView. The hits1 field corresponds to the
     * database column innodb.innodb.AlbumView.hits:1.
     * 
     * @return the hits1 of this AlbumView
     */
    Optional<Byte> getHits1();
    
    /**
     * Sets the id of this AlbumView. The id field corresponds to the database
     * column innodb.innodb.AlbumView.id.
     * 
     * @param id to set of this AlbumView
     * @return   this AlbumView instance
     */
    AlbumView setId(Short id);
    
    /**
     * Sets the albumId of this AlbumView. The albumId field corresponds to the
     * database column innodb.innodb.AlbumView.album_id.
     * 
     * @param albumId to set of this AlbumView
     * @return        this AlbumView instance
     */
    AlbumView setAlbumId(Byte albumId);
    
    /**
     * Sets the entryId of this AlbumView. The entryId field corresponds to the
     * database column innodb.innodb.AlbumView.entry_id.
     * 
     * @param entryId to set of this AlbumView
     * @return        this AlbumView instance
     */
    AlbumView setEntryId(Integer entryId);
    
    /**
     * Sets the id1 of this AlbumView. The id1 field corresponds to the database
     * column innodb.innodb.AlbumView.id:1.
     * 
     * @param id1 to set of this AlbumView
     * @return    this AlbumView instance
     */
    AlbumView setId1(Integer id1);
    
    /**
     * Sets the file of this AlbumView. The file field corresponds to the
     * database column innodb.innodb.AlbumView.file.
     * 
     * @param file to set of this AlbumView
     * @return     this AlbumView instance
     */
    AlbumView setFile(String file);
    
    /**
     * Sets the title of this AlbumView. The title field corresponds to the
     * database column innodb.innodb.AlbumView.title.
     * 
     * @param title to set of this AlbumView
     * @return      this AlbumView instance
     */
    AlbumView setTitle(String title);
    
    /**
     * Sets the sortkey of this AlbumView. The sortkey field corresponds to the
     * database column innodb.innodb.AlbumView.sortkey.
     * 
     * @param sortkey to set of this AlbumView
     * @return        this AlbumView instance
     */
    AlbumView setSortkey(String sortkey);
    
    /**
     * Sets the addedOn of this AlbumView. The addedOn field corresponds to the
     * database column innodb.innodb.AlbumView.added_on.
     * 
     * @param addedOn to set of this AlbumView
     * @return        this AlbumView instance
     */
    AlbumView setAddedOn(String addedOn);
    
    /**
     * Sets the takenOn of this AlbumView. The takenOn field corresponds to the
     * database column innodb.innodb.AlbumView.taken_on.
     * 
     * @param takenOn to set of this AlbumView
     * @return        this AlbumView instance
     */
    AlbumView setTakenOn(String takenOn);
    
    /**
     * Sets the lastModified of this AlbumView. The lastModified field
     * corresponds to the database column innodb.innodb.AlbumView.last_modified.
     * 
     * @param lastModified to set of this AlbumView
     * @return             this AlbumView instance
     */
    AlbumView setLastModified(String lastModified);
    
    /**
     * Sets the location of this AlbumView. The location field corresponds to
     * the database column innodb.innodb.AlbumView.location.
     * 
     * @param location to set of this AlbumView
     * @return         this AlbumView instance
     */
    AlbumView setLocation(String location);
    
    /**
     * Sets the primaryCategory of this AlbumView. The primaryCategory field
     * corresponds to the database column
     * innodb.innodb.AlbumView.primaryCategory.
     * 
     * @param primaryCategory to set of this AlbumView
     * @return                this AlbumView instance
     */
    AlbumView setPrimaryCategory(String primaryCategory);
    
    /**
     * Sets the secondaryCategory of this AlbumView. The secondaryCategory field
     * corresponds to the database column
     * innodb.innodb.AlbumView.secondaryCategory.
     * 
     * @param secondaryCategory to set of this AlbumView
     * @return                  this AlbumView instance
     */
    AlbumView setSecondaryCategory(String secondaryCategory);
    
    /**
     * Sets the keywordsId of this AlbumView. The keywordsId field corresponds
     * to the database column innodb.innodb.AlbumView.keywords_id.
     * 
     * @param keywordsId to set of this AlbumView
     * @return           this AlbumView instance
     */
    AlbumView setKeywordsId(String keywordsId);
    
    /**
     * Sets the pathId of this AlbumView. The pathId field corresponds to the
     * database column innodb.innodb.AlbumView.path_id.
     * 
     * @param pathId to set of this AlbumView
     * @return       this AlbumView instance
     */
    AlbumView setPathId(Short pathId);
    
    /**
     * Sets the hits of this AlbumView. The hits field corresponds to the
     * database column innodb.innodb.AlbumView.hits.
     * 
     * @param hits to set of this AlbumView
     * @return     this AlbumView instance
     */
    AlbumView setHits(Byte hits);
    
    /**
     * Sets the id2 of this AlbumView. The id2 field corresponds to the database
     * column innodb.innodb.AlbumView.id:2.
     * 
     * @param id2 to set of this AlbumView
     * @return    this AlbumView instance
     */
    AlbumView setId2(Byte id2);
    
    /**
     * Sets the name of this AlbumView. The name field corresponds to the
     * database column innodb.innodb.AlbumView.name.
     * 
     * @param name to set of this AlbumView
     * @return     this AlbumView instance
     */
    AlbumView setName(String name);
    
    /**
     * Sets the count of this AlbumView. The count field corresponds to the
     * database column innodb.innodb.AlbumView.count.
     * 
     * @param count to set of this AlbumView
     * @return      this AlbumView instance
     */
    AlbumView setCount(Byte count);
    
    /**
     * Sets the thumbnailId of this AlbumView. The thumbnailId field corresponds
     * to the database column innodb.innodb.AlbumView.thumbnail_id.
     * 
     * @param thumbnailId to set of this AlbumView
     * @return            this AlbumView instance
     */
    AlbumView setThumbnailId(Integer thumbnailId);
    
    /**
     * Sets the hits1 of this AlbumView. The hits1 field corresponds to the
     * database column innodb.innodb.AlbumView.hits:1.
     * 
     * @param hits1 to set of this AlbumView
     * @return      this AlbumView instance
     */
    AlbumView setHits1(Byte hits1);
    
    enum Identifier implements ColumnIdentifier<AlbumView> {
        
        ID                 ("id"),
        ALBUM_ID           ("album_id"),
        ENTRY_ID           ("entry_id"),
        ID1                ("id:1"),
        FILE               ("file"),
        TITLE              ("title"),
        SORTKEY            ("sortkey"),
        ADDED_ON           ("added_on"),
        TAKEN_ON           ("taken_on"),
        LAST_MODIFIED      ("last_modified"),
        LOCATION           ("location"),
        PRIMARY_CATEGORY   ("primaryCategory"),
        SECONDARY_CATEGORY ("secondaryCategory"),
        KEYWORDS_ID        ("keywords_id"),
        PATH_ID            ("path_id"),
        HITS               ("hits"),
        ID2                ("id:2"),
        NAME               ("name"),
        COUNT              ("count"),
        THUMBNAIL_ID       ("thumbnail_id"),
        HITS1              ("hits:1");
        
        private final String columnId;
        private final TableIdentifier<AlbumView> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "AlbumView";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AlbumView> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}