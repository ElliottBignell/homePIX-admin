package com.elliottbignell.homepix.innodb.innodb.auth_group.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_group.AuthGroup;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_group.AuthGroup}-interface
 * representing entities of the {@code auth_group}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthGroup {
    
    /**
     * This Field corresponds to the {@link AuthGroup} field that can be
     * obtained using the {@link AuthGroup#getId()} method.
     */
    StringField<AuthGroup, String> ID = DatastoreFields.createStringField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        AuthGroup::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthGroup} field that can be
     * obtained using the {@link AuthGroup#getName()} method.
     */
    StringField<AuthGroup, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        AuthGroup::setName,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AuthGroup. The id field corresponds to the
     * database column innodb.innodb.auth_group.id.
     * 
     * @return the id of this AuthGroup
     */
    Optional<String> getId();
    
    /**
     * Returns the name of this AuthGroup. The name field corresponds to the
     * database column innodb.innodb.auth_group.name.
     * 
     * @return the name of this AuthGroup
     */
    Optional<String> getName();
    
    /**
     * Sets the id of this AuthGroup. The id field corresponds to the database
     * column innodb.innodb.auth_group.id.
     * 
     * @param id to set of this AuthGroup
     * @return   this AuthGroup instance
     */
    AuthGroup setId(String id);
    
    /**
     * Sets the name of this AuthGroup. The name field corresponds to the
     * database column innodb.innodb.auth_group.name.
     * 
     * @param name to set of this AuthGroup
     * @return     this AuthGroup instance
     */
    AuthGroup setName(String name);
    
    enum Identifier implements ColumnIdentifier<AuthGroup> {
        
        ID   ("id"),
        NAME ("name");
        
        private final String columnId;
        private final TableIdentifier<AuthGroup> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "auth_group";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AuthGroup> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}