package com.elliottbignell.homepix.innodb.innodb.homepix_csventry.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_csventry.HomePixCsventry;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.homepix_csventry.HomePixCsventry}-interface
 * representing entities of the {@code homePIX_csventry}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedHomePixCsventry {
    
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getId()} method.
     */
    ComparableField<HomePixCsventry, Integer, Integer> ID = DatastoreFields.createComparableField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        HomePixCsventry::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getFilename()} method.
     */
    StringField<HomePixCsventry, String> FILENAME = DatastoreFields.createStringField(
        Identifier.FILENAME,
        o -> OptionalUtil.unwrap(o.getFilename()),
        HomePixCsventry::setFilename,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getImageRef()} method.
     */
    StringField<HomePixCsventry, String> IMAGE_REF = DatastoreFields.createStringField(
        Identifier.IMAGE_REF,
        o -> OptionalUtil.unwrap(o.getImageRef()),
        HomePixCsventry::setImageRef,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getCaption()} method.
     */
    StringField<HomePixCsventry, String> CAPTION = DatastoreFields.createStringField(
        Identifier.CAPTION,
        o -> OptionalUtil.unwrap(o.getCaption()),
        HomePixCsventry::setCaption,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getTags()} method.
     */
    StringField<HomePixCsventry, String> TAGS = DatastoreFields.createStringField(
        Identifier.TAGS,
        o -> OptionalUtil.unwrap(o.getTags()),
        HomePixCsventry::setTags,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getLicenseType()} method.
     */
    StringField<HomePixCsventry, String> LICENSE_TYPE = DatastoreFields.createStringField(
        Identifier.LICENSE_TYPE,
        o -> OptionalUtil.unwrap(o.getLicenseType()),
        HomePixCsventry::setLicenseType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getUserName()} method.
     */
    StringField<HomePixCsventry, String> USER_NAME = DatastoreFields.createStringField(
        Identifier.USER_NAME,
        o -> OptionalUtil.unwrap(o.getUserName()),
        HomePixCsventry::setUserName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getSuperTags()} method.
     */
    StringField<HomePixCsventry, String> SUPER_TAGS = DatastoreFields.createStringField(
        Identifier.SUPER_TAGS,
        o -> OptionalUtil.unwrap(o.getSuperTags()),
        HomePixCsventry::setSuperTags,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getLocation()} method.
     */
    StringField<HomePixCsventry, String> LOCATION = DatastoreFields.createStringField(
        Identifier.LOCATION,
        o -> OptionalUtil.unwrap(o.getLocation()),
        HomePixCsventry::setLocation,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getNumberOfPeople()} method.
     */
    ComparableField<HomePixCsventry, Byte, Byte> NUMBER_OF_PEOPLE = DatastoreFields.createComparableField(
        Identifier.NUMBER_OF_PEOPLE,
        o -> OptionalUtil.unwrap(o.getNumberOfPeople()),
        HomePixCsventry::setNumberOfPeople,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getModelRelease()} method.
     */
    StringField<HomePixCsventry, String> MODEL_RELEASE = DatastoreFields.createStringField(
        Identifier.MODEL_RELEASE,
        o -> OptionalUtil.unwrap(o.getModelRelease()),
        HomePixCsventry::setModelRelease,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getIsThereProperty()} method.
     */
    StringField<HomePixCsventry, String> IS_THERE_PROPERTY = DatastoreFields.createStringField(
        Identifier.IS_THERE_PROPERTY,
        o -> OptionalUtil.unwrap(o.getIsThereProperty()),
        HomePixCsventry::setIsThereProperty,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getPropertyRelease()} method.
     */
    StringField<HomePixCsventry, String> PROPERTY_RELEASE = DatastoreFields.createStringField(
        Identifier.PROPERTY_RELEASE,
        o -> OptionalUtil.unwrap(o.getPropertyRelease()),
        HomePixCsventry::setPropertyRelease,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getPrimaryCategory()} method.
     */
    StringField<HomePixCsventry, String> PRIMARY_CATEGORY = DatastoreFields.createStringField(
        Identifier.PRIMARY_CATEGORY,
        o -> OptionalUtil.unwrap(o.getPrimaryCategory()),
        HomePixCsventry::setPrimaryCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getSecondaryCategory()} method.
     */
    StringField<HomePixCsventry, String> SECONDARY_CATEGORY = DatastoreFields.createStringField(
        Identifier.SECONDARY_CATEGORY,
        o -> OptionalUtil.unwrap(o.getSecondaryCategory()),
        HomePixCsventry::setSecondaryCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getImageType()} method.
     */
    StringField<HomePixCsventry, String> IMAGE_TYPE = DatastoreFields.createStringField(
        Identifier.IMAGE_TYPE,
        o -> OptionalUtil.unwrap(o.getImageType()),
        HomePixCsventry::setImageType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getExclusiveToAlamy()} method.
     */
    StringField<HomePixCsventry, String> EXCLUSIVE_TO_ALAMY = DatastoreFields.createStringField(
        Identifier.EXCLUSIVE_TO_ALAMY,
        o -> OptionalUtil.unwrap(o.getExclusiveToAlamy()),
        HomePixCsventry::setExclusiveToAlamy,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getAdditionalInfo()} method.
     */
    StringField<HomePixCsventry, String> ADDITIONAL_INFO = DatastoreFields.createStringField(
        Identifier.ADDITIONAL_INFO,
        o -> OptionalUtil.unwrap(o.getAdditionalInfo()),
        HomePixCsventry::setAdditionalInfo,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getStatus()} method.
     */
    StringField<HomePixCsventry, String> STATUS = DatastoreFields.createStringField(
        Identifier.STATUS,
        o -> OptionalUtil.unwrap(o.getStatus()),
        HomePixCsventry::setStatus,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link HomePixCsventry} field that can be
     * obtained using the {@link HomePixCsventry#getDateTaken()} method.
     */
    StringField<HomePixCsventry, String> DATE_TAKEN = DatastoreFields.createStringField(
        Identifier.DATE_TAKEN,
        o -> OptionalUtil.unwrap(o.getDateTaken()),
        HomePixCsventry::setDateTaken,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this HomePixCsventry. The id field corresponds to the
     * database column innodb.innodb.homePIX_csventry.id.
     * 
     * @return the id of this HomePixCsventry
     */
    OptionalInt getId();
    
    /**
     * Returns the filename of this HomePixCsventry. The filename field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.filename.
     * 
     * @return the filename of this HomePixCsventry
     */
    Optional<String> getFilename();
    
    /**
     * Returns the imageRef of this HomePixCsventry. The imageRef field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.imageRef.
     * 
     * @return the imageRef of this HomePixCsventry
     */
    Optional<String> getImageRef();
    
    /**
     * Returns the caption of this HomePixCsventry. The caption field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.caption.
     * 
     * @return the caption of this HomePixCsventry
     */
    Optional<String> getCaption();
    
    /**
     * Returns the tags of this HomePixCsventry. The tags field corresponds to
     * the database column innodb.innodb.homePIX_csventry.tags.
     * 
     * @return the tags of this HomePixCsventry
     */
    Optional<String> getTags();
    
    /**
     * Returns the licenseType of this HomePixCsventry. The licenseType field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.licenseType.
     * 
     * @return the licenseType of this HomePixCsventry
     */
    Optional<String> getLicenseType();
    
    /**
     * Returns the userName of this HomePixCsventry. The userName field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.userName.
     * 
     * @return the userName of this HomePixCsventry
     */
    Optional<String> getUserName();
    
    /**
     * Returns the superTags of this HomePixCsventry. The superTags field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.superTags.
     * 
     * @return the superTags of this HomePixCsventry
     */
    Optional<String> getSuperTags();
    
    /**
     * Returns the location of this HomePixCsventry. The location field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.location.
     * 
     * @return the location of this HomePixCsventry
     */
    Optional<String> getLocation();
    
    /**
     * Returns the numberOfPeople of this HomePixCsventry. The numberOfPeople
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.numberOfPeople.
     * 
     * @return the numberOfPeople of this HomePixCsventry
     */
    Optional<Byte> getNumberOfPeople();
    
    /**
     * Returns the modelRelease of this HomePixCsventry. The modelRelease field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.modelRelease.
     * 
     * @return the modelRelease of this HomePixCsventry
     */
    Optional<String> getModelRelease();
    
    /**
     * Returns the isThereProperty of this HomePixCsventry. The isThereProperty
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.isThereProperty.
     * 
     * @return the isThereProperty of this HomePixCsventry
     */
    Optional<String> getIsThereProperty();
    
    /**
     * Returns the propertyRelease of this HomePixCsventry. The propertyRelease
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.propertyRelease.
     * 
     * @return the propertyRelease of this HomePixCsventry
     */
    Optional<String> getPropertyRelease();
    
    /**
     * Returns the primaryCategory of this HomePixCsventry. The primaryCategory
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.primaryCategory.
     * 
     * @return the primaryCategory of this HomePixCsventry
     */
    Optional<String> getPrimaryCategory();
    
    /**
     * Returns the secondaryCategory of this HomePixCsventry. The
     * secondaryCategory field corresponds to the database column
     * innodb.innodb.homePIX_csventry.secondaryCategory.
     * 
     * @return the secondaryCategory of this HomePixCsventry
     */
    Optional<String> getSecondaryCategory();
    
    /**
     * Returns the imageType of this HomePixCsventry. The imageType field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.imageType.
     * 
     * @return the imageType of this HomePixCsventry
     */
    Optional<String> getImageType();
    
    /**
     * Returns the exclusiveToAlamy of this HomePixCsventry. The
     * exclusiveToAlamy field corresponds to the database column
     * innodb.innodb.homePIX_csventry.exclusiveToAlamy.
     * 
     * @return the exclusiveToAlamy of this HomePixCsventry
     */
    Optional<String> getExclusiveToAlamy();
    
    /**
     * Returns the additionalInfo of this HomePixCsventry. The additionalInfo
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.additionalInfo.
     * 
     * @return the additionalInfo of this HomePixCsventry
     */
    Optional<String> getAdditionalInfo();
    
    /**
     * Returns the status of this HomePixCsventry. The status field corresponds
     * to the database column innodb.innodb.homePIX_csventry.status.
     * 
     * @return the status of this HomePixCsventry
     */
    Optional<String> getStatus();
    
    /**
     * Returns the dateTaken of this HomePixCsventry. The dateTaken field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.dateTaken.
     * 
     * @return the dateTaken of this HomePixCsventry
     */
    Optional<String> getDateTaken();
    
    /**
     * Sets the id of this HomePixCsventry. The id field corresponds to the
     * database column innodb.innodb.homePIX_csventry.id.
     * 
     * @param id to set of this HomePixCsventry
     * @return   this HomePixCsventry instance
     */
    HomePixCsventry setId(Integer id);
    
    /**
     * Sets the filename of this HomePixCsventry. The filename field corresponds
     * to the database column innodb.innodb.homePIX_csventry.filename.
     * 
     * @param filename to set of this HomePixCsventry
     * @return         this HomePixCsventry instance
     */
    HomePixCsventry setFilename(String filename);
    
    /**
     * Sets the imageRef of this HomePixCsventry. The imageRef field corresponds
     * to the database column innodb.innodb.homePIX_csventry.imageRef.
     * 
     * @param imageRef to set of this HomePixCsventry
     * @return         this HomePixCsventry instance
     */
    HomePixCsventry setImageRef(String imageRef);
    
    /**
     * Sets the caption of this HomePixCsventry. The caption field corresponds
     * to the database column innodb.innodb.homePIX_csventry.caption.
     * 
     * @param caption to set of this HomePixCsventry
     * @return        this HomePixCsventry instance
     */
    HomePixCsventry setCaption(String caption);
    
    /**
     * Sets the tags of this HomePixCsventry. The tags field corresponds to the
     * database column innodb.innodb.homePIX_csventry.tags.
     * 
     * @param tags to set of this HomePixCsventry
     * @return     this HomePixCsventry instance
     */
    HomePixCsventry setTags(String tags);
    
    /**
     * Sets the licenseType of this HomePixCsventry. The licenseType field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.licenseType.
     * 
     * @param licenseType to set of this HomePixCsventry
     * @return            this HomePixCsventry instance
     */
    HomePixCsventry setLicenseType(String licenseType);
    
    /**
     * Sets the userName of this HomePixCsventry. The userName field corresponds
     * to the database column innodb.innodb.homePIX_csventry.userName.
     * 
     * @param userName to set of this HomePixCsventry
     * @return         this HomePixCsventry instance
     */
    HomePixCsventry setUserName(String userName);
    
    /**
     * Sets the superTags of this HomePixCsventry. The superTags field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.superTags.
     * 
     * @param superTags to set of this HomePixCsventry
     * @return          this HomePixCsventry instance
     */
    HomePixCsventry setSuperTags(String superTags);
    
    /**
     * Sets the location of this HomePixCsventry. The location field corresponds
     * to the database column innodb.innodb.homePIX_csventry.location.
     * 
     * @param location to set of this HomePixCsventry
     * @return         this HomePixCsventry instance
     */
    HomePixCsventry setLocation(String location);
    
    /**
     * Sets the numberOfPeople of this HomePixCsventry. The numberOfPeople field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.numberOfPeople.
     * 
     * @param numberOfPeople to set of this HomePixCsventry
     * @return               this HomePixCsventry instance
     */
    HomePixCsventry setNumberOfPeople(Byte numberOfPeople);
    
    /**
     * Sets the modelRelease of this HomePixCsventry. The modelRelease field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.modelRelease.
     * 
     * @param modelRelease to set of this HomePixCsventry
     * @return             this HomePixCsventry instance
     */
    HomePixCsventry setModelRelease(String modelRelease);
    
    /**
     * Sets the isThereProperty of this HomePixCsventry. The isThereProperty
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.isThereProperty.
     * 
     * @param isThereProperty to set of this HomePixCsventry
     * @return                this HomePixCsventry instance
     */
    HomePixCsventry setIsThereProperty(String isThereProperty);
    
    /**
     * Sets the propertyRelease of this HomePixCsventry. The propertyRelease
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.propertyRelease.
     * 
     * @param propertyRelease to set of this HomePixCsventry
     * @return                this HomePixCsventry instance
     */
    HomePixCsventry setPropertyRelease(String propertyRelease);
    
    /**
     * Sets the primaryCategory of this HomePixCsventry. The primaryCategory
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.primaryCategory.
     * 
     * @param primaryCategory to set of this HomePixCsventry
     * @return                this HomePixCsventry instance
     */
    HomePixCsventry setPrimaryCategory(String primaryCategory);
    
    /**
     * Sets the secondaryCategory of this HomePixCsventry. The secondaryCategory
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.secondaryCategory.
     * 
     * @param secondaryCategory to set of this HomePixCsventry
     * @return                  this HomePixCsventry instance
     */
    HomePixCsventry setSecondaryCategory(String secondaryCategory);
    
    /**
     * Sets the imageType of this HomePixCsventry. The imageType field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.imageType.
     * 
     * @param imageType to set of this HomePixCsventry
     * @return          this HomePixCsventry instance
     */
    HomePixCsventry setImageType(String imageType);
    
    /**
     * Sets the exclusiveToAlamy of this HomePixCsventry. The exclusiveToAlamy
     * field corresponds to the database column
     * innodb.innodb.homePIX_csventry.exclusiveToAlamy.
     * 
     * @param exclusiveToAlamy to set of this HomePixCsventry
     * @return                 this HomePixCsventry instance
     */
    HomePixCsventry setExclusiveToAlamy(String exclusiveToAlamy);
    
    /**
     * Sets the additionalInfo of this HomePixCsventry. The additionalInfo field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.additionalInfo.
     * 
     * @param additionalInfo to set of this HomePixCsventry
     * @return               this HomePixCsventry instance
     */
    HomePixCsventry setAdditionalInfo(String additionalInfo);
    
    /**
     * Sets the status of this HomePixCsventry. The status field corresponds to
     * the database column innodb.innodb.homePIX_csventry.status.
     * 
     * @param status to set of this HomePixCsventry
     * @return       this HomePixCsventry instance
     */
    HomePixCsventry setStatus(String status);
    
    /**
     * Sets the dateTaken of this HomePixCsventry. The dateTaken field
     * corresponds to the database column
     * innodb.innodb.homePIX_csventry.dateTaken.
     * 
     * @param dateTaken to set of this HomePixCsventry
     * @return          this HomePixCsventry instance
     */
    HomePixCsventry setDateTaken(String dateTaken);
    
    enum Identifier implements ColumnIdentifier<HomePixCsventry> {
        
        ID                 ("id"),
        FILENAME           ("filename"),
        IMAGE_REF          ("imageRef"),
        CAPTION            ("caption"),
        TAGS               ("tags"),
        LICENSE_TYPE       ("licenseType"),
        USER_NAME          ("userName"),
        SUPER_TAGS         ("superTags"),
        LOCATION           ("location"),
        NUMBER_OF_PEOPLE   ("numberOfPeople"),
        MODEL_RELEASE      ("modelRelease"),
        IS_THERE_PROPERTY  ("isThereProperty"),
        PROPERTY_RELEASE   ("propertyRelease"),
        PRIMARY_CATEGORY   ("primaryCategory"),
        SECONDARY_CATEGORY ("secondaryCategory"),
        IMAGE_TYPE         ("imageType"),
        EXCLUSIVE_TO_ALAMY ("exclusiveToAlamy"),
        ADDITIONAL_INFO    ("additionalInfo"),
        STATUS             ("status"),
        DATE_TAKEN         ("dateTaken");
        
        private final String columnId;
        private final TableIdentifier<HomePixCsventry> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "homePIX_csventry";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<HomePixCsventry> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}