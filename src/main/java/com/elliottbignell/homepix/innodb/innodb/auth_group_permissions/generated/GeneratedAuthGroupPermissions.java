package com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.AuthGroupPermissions;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.AuthGroupPermissions}-interface
 * representing entities of the {@code auth_group_permissions}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthGroupPermissions {
    
    /**
     * This Field corresponds to the {@link AuthGroupPermissions} field that can
     * be obtained using the {@link AuthGroupPermissions#getId()} method.
     */
    StringField<AuthGroupPermissions, String> ID = DatastoreFields.createStringField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        AuthGroupPermissions::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthGroupPermissions} field that can
     * be obtained using the {@link AuthGroupPermissions#getGroupId()} method.
     */
    StringField<AuthGroupPermissions, String> GROUP_ID = DatastoreFields.createStringField(
        Identifier.GROUP_ID,
        o -> OptionalUtil.unwrap(o.getGroupId()),
        AuthGroupPermissions::setGroupId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthGroupPermissions} field that can
     * be obtained using the {@link AuthGroupPermissions#getPermissionId()}
     * method.
     */
    StringField<AuthGroupPermissions, String> PERMISSION_ID = DatastoreFields.createStringField(
        Identifier.PERMISSION_ID,
        o -> OptionalUtil.unwrap(o.getPermissionId()),
        AuthGroupPermissions::setPermissionId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AuthGroupPermissions. The id field corresponds to
     * the database column innodb.innodb.auth_group_permissions.id.
     * 
     * @return the id of this AuthGroupPermissions
     */
    Optional<String> getId();
    
    /**
     * Returns the groupId of this AuthGroupPermissions. The groupId field
     * corresponds to the database column
     * innodb.innodb.auth_group_permissions.group_id.
     * 
     * @return the groupId of this AuthGroupPermissions
     */
    Optional<String> getGroupId();
    
    /**
     * Returns the permissionId of this AuthGroupPermissions. The permissionId
     * field corresponds to the database column
     * innodb.innodb.auth_group_permissions.permission_id.
     * 
     * @return the permissionId of this AuthGroupPermissions
     */
    Optional<String> getPermissionId();
    
    /**
     * Sets the id of this AuthGroupPermissions. The id field corresponds to the
     * database column innodb.innodb.auth_group_permissions.id.
     * 
     * @param id to set of this AuthGroupPermissions
     * @return   this AuthGroupPermissions instance
     */
    AuthGroupPermissions setId(String id);
    
    /**
     * Sets the groupId of this AuthGroupPermissions. The groupId field
     * corresponds to the database column
     * innodb.innodb.auth_group_permissions.group_id.
     * 
     * @param groupId to set of this AuthGroupPermissions
     * @return        this AuthGroupPermissions instance
     */
    AuthGroupPermissions setGroupId(String groupId);
    
    /**
     * Sets the permissionId of this AuthGroupPermissions. The permissionId
     * field corresponds to the database column
     * innodb.innodb.auth_group_permissions.permission_id.
     * 
     * @param permissionId to set of this AuthGroupPermissions
     * @return             this AuthGroupPermissions instance
     */
    AuthGroupPermissions setPermissionId(String permissionId);
    
    enum Identifier implements ColumnIdentifier<AuthGroupPermissions> {
        
        ID            ("id"),
        GROUP_ID      ("group_id"),
        PERMISSION_ID ("permission_id");
        
        private final String columnId;
        private final TableIdentifier<AuthGroupPermissions> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "auth_group_permissions";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AuthGroupPermissions> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}