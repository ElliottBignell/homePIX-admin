package com.elliottbignell.homepix.innodb.innodb.imports.generated;

import com.elliottbignell.homepix.innodb.innodb.imports.Imports;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.imports.Imports}-interface
 * representing entities of the {@code imports}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedImports {
    
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getId()} method.
     */
    ComparableField<Imports, Integer, Integer> ID = DatastoreFields.createComparableField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        Imports::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getFile()} method.
     */
    StringField<Imports, String> FILE = DatastoreFields.createStringField(
        Identifier.FILE,
        o -> OptionalUtil.unwrap(o.getFile()),
        Imports::setFile,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getTitle()} method.
     */
    StringField<Imports, String> TITLE = DatastoreFields.createStringField(
        Identifier.TITLE,
        o -> OptionalUtil.unwrap(o.getTitle()),
        Imports::setTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getSortkey()} method.
     */
    StringField<Imports, String> SORTKEY = DatastoreFields.createStringField(
        Identifier.SORTKEY,
        o -> OptionalUtil.unwrap(o.getSortkey()),
        Imports::setSortkey,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getAddedOn()} method.
     */
    StringField<Imports, String> ADDED_ON = DatastoreFields.createStringField(
        Identifier.ADDED_ON,
        o -> OptionalUtil.unwrap(o.getAddedOn()),
        Imports::setAddedOn,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getLastModified()} method.
     */
    StringField<Imports, String> LAST_MODIFIED = DatastoreFields.createStringField(
        Identifier.LAST_MODIFIED,
        o -> OptionalUtil.unwrap(o.getLastModified()),
        Imports::setLastModified,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getKeywordsId()} method.
     */
    ComparableField<Imports, Short, Short> KEYWORDS_ID = DatastoreFields.createComparableField(
        Identifier.KEYWORDS_ID,
        o -> OptionalUtil.unwrap(o.getKeywordsId()),
        Imports::setKeywordsId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getPathId()} method.
     */
    ComparableField<Imports, Short, Short> PATH_ID = DatastoreFields.createComparableField(
        Identifier.PATH_ID,
        o -> OptionalUtil.unwrap(o.getPathId()),
        Imports::setPathId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getLocation()} method.
     */
    StringField<Imports, String> LOCATION = DatastoreFields.createStringField(
        Identifier.LOCATION,
        o -> OptionalUtil.unwrap(o.getLocation()),
        Imports::setLocation,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getPrimaryCategory()} method.
     */
    StringField<Imports, String> PRIMARY_CATEGORY = DatastoreFields.createStringField(
        Identifier.PRIMARY_CATEGORY,
        o -> OptionalUtil.unwrap(o.getPrimaryCategory()),
        Imports::setPrimaryCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getSecondaryCategory()} method.
     */
    StringField<Imports, String> SECONDARY_CATEGORY = DatastoreFields.createStringField(
        Identifier.SECONDARY_CATEGORY,
        o -> OptionalUtil.unwrap(o.getSecondaryCategory()),
        Imports::setSecondaryCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getTakenOn()} method.
     */
    StringField<Imports, String> TAKEN_ON = DatastoreFields.createStringField(
        Identifier.TAKEN_ON,
        o -> OptionalUtil.unwrap(o.getTakenOn()),
        Imports::setTakenOn,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getId1()} method.
     */
    ComparableField<Imports, Integer, Integer> ID1 = DatastoreFields.createComparableField(
        Identifier.ID1,
        o -> OptionalUtil.unwrap(o.getId1()),
        Imports::setId1,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getFilename()} method.
     */
    StringField<Imports, String> FILENAME = DatastoreFields.createStringField(
        Identifier.FILENAME,
        o -> OptionalUtil.unwrap(o.getFilename()),
        Imports::setFilename,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getImageRef()} method.
     */
    StringField<Imports, String> IMAGE_REF = DatastoreFields.createStringField(
        Identifier.IMAGE_REF,
        o -> OptionalUtil.unwrap(o.getImageRef()),
        Imports::setImageRef,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getCaption()} method.
     */
    StringField<Imports, String> CAPTION = DatastoreFields.createStringField(
        Identifier.CAPTION,
        o -> OptionalUtil.unwrap(o.getCaption()),
        Imports::setCaption,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getTags()} method.
     */
    StringField<Imports, String> TAGS = DatastoreFields.createStringField(
        Identifier.TAGS,
        o -> OptionalUtil.unwrap(o.getTags()),
        Imports::setTags,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getLicenseType()} method.
     */
    StringField<Imports, String> LICENSE_TYPE = DatastoreFields.createStringField(
        Identifier.LICENSE_TYPE,
        o -> OptionalUtil.unwrap(o.getLicenseType()),
        Imports::setLicenseType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getUserName()} method.
     */
    StringField<Imports, String> USER_NAME = DatastoreFields.createStringField(
        Identifier.USER_NAME,
        o -> OptionalUtil.unwrap(o.getUserName()),
        Imports::setUserName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getSuperTags()} method.
     */
    StringField<Imports, String> SUPER_TAGS = DatastoreFields.createStringField(
        Identifier.SUPER_TAGS,
        o -> OptionalUtil.unwrap(o.getSuperTags()),
        Imports::setSuperTags,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getLocation1()} method.
     */
    StringField<Imports, String> LOCATION1 = DatastoreFields.createStringField(
        Identifier.LOCATION1,
        o -> OptionalUtil.unwrap(o.getLocation1()),
        Imports::setLocation1,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getNumberOfPeople()} method.
     */
    ComparableField<Imports, Byte, Byte> NUMBER_OF_PEOPLE = DatastoreFields.createComparableField(
        Identifier.NUMBER_OF_PEOPLE,
        o -> OptionalUtil.unwrap(o.getNumberOfPeople()),
        Imports::setNumberOfPeople,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getModelRelease()} method.
     */
    StringField<Imports, String> MODEL_RELEASE = DatastoreFields.createStringField(
        Identifier.MODEL_RELEASE,
        o -> OptionalUtil.unwrap(o.getModelRelease()),
        Imports::setModelRelease,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getIsThereProperty()} method.
     */
    StringField<Imports, String> IS_THERE_PROPERTY = DatastoreFields.createStringField(
        Identifier.IS_THERE_PROPERTY,
        o -> OptionalUtil.unwrap(o.getIsThereProperty()),
        Imports::setIsThereProperty,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getPropertyRelease()} method.
     */
    StringField<Imports, String> PROPERTY_RELEASE = DatastoreFields.createStringField(
        Identifier.PROPERTY_RELEASE,
        o -> OptionalUtil.unwrap(o.getPropertyRelease()),
        Imports::setPropertyRelease,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getPrimaryCategory1()} method.
     */
    StringField<Imports, String> PRIMARY_CATEGORY1 = DatastoreFields.createStringField(
        Identifier.PRIMARY_CATEGORY1,
        o -> OptionalUtil.unwrap(o.getPrimaryCategory1()),
        Imports::setPrimaryCategory1,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getSecondaryCategory1()} method.
     */
    StringField<Imports, String> SECONDARY_CATEGORY1 = DatastoreFields.createStringField(
        Identifier.SECONDARY_CATEGORY1,
        o -> OptionalUtil.unwrap(o.getSecondaryCategory1()),
        Imports::setSecondaryCategory1,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getImageType()} method.
     */
    StringField<Imports, String> IMAGE_TYPE = DatastoreFields.createStringField(
        Identifier.IMAGE_TYPE,
        o -> OptionalUtil.unwrap(o.getImageType()),
        Imports::setImageType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getExclusiveToAlamy()} method.
     */
    StringField<Imports, String> EXCLUSIVE_TO_ALAMY = DatastoreFields.createStringField(
        Identifier.EXCLUSIVE_TO_ALAMY,
        o -> OptionalUtil.unwrap(o.getExclusiveToAlamy()),
        Imports::setExclusiveToAlamy,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getAdditionalInfo()} method.
     */
    StringField<Imports, String> ADDITIONAL_INFO = DatastoreFields.createStringField(
        Identifier.ADDITIONAL_INFO,
        o -> OptionalUtil.unwrap(o.getAdditionalInfo()),
        Imports::setAdditionalInfo,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getStatus()} method.
     */
    StringField<Imports, String> STATUS = DatastoreFields.createStringField(
        Identifier.STATUS,
        o -> OptionalUtil.unwrap(o.getStatus()),
        Imports::setStatus,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getDateTaken()} method.
     */
    StringField<Imports, String> DATE_TAKEN = DatastoreFields.createStringField(
        Identifier.DATE_TAKEN,
        o -> OptionalUtil.unwrap(o.getDateTaken()),
        Imports::setDateTaken,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getTaken()} method.
     */
    StringField<Imports, String> TAKEN = DatastoreFields.createStringField(
        Identifier.TAKEN,
        o -> OptionalUtil.unwrap(o.getTaken()),
        Imports::setTaken,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Imports} field that can be obtained
     * using the {@link Imports#getShot()} method.
     */
    StringField<Imports, String> SHOT = DatastoreFields.createStringField(
        Identifier.SHOT,
        o -> OptionalUtil.unwrap(o.getShot()),
        Imports::setShot,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Imports. The id field corresponds to the database
     * column innodb.innodb.imports.id.
     * 
     * @return the id of this Imports
     */
    OptionalInt getId();
    
    /**
     * Returns the file of this Imports. The file field corresponds to the
     * database column innodb.innodb.imports.file.
     * 
     * @return the file of this Imports
     */
    Optional<String> getFile();
    
    /**
     * Returns the title of this Imports. The title field corresponds to the
     * database column innodb.innodb.imports.title.
     * 
     * @return the title of this Imports
     */
    Optional<String> getTitle();
    
    /**
     * Returns the sortkey of this Imports. The sortkey field corresponds to the
     * database column innodb.innodb.imports.sortkey.
     * 
     * @return the sortkey of this Imports
     */
    Optional<String> getSortkey();
    
    /**
     * Returns the addedOn of this Imports. The addedOn field corresponds to the
     * database column innodb.innodb.imports.added_on.
     * 
     * @return the addedOn of this Imports
     */
    Optional<String> getAddedOn();
    
    /**
     * Returns the lastModified of this Imports. The lastModified field
     * corresponds to the database column innodb.innodb.imports.last_modified.
     * 
     * @return the lastModified of this Imports
     */
    Optional<String> getLastModified();
    
    /**
     * Returns the keywordsId of this Imports. The keywordsId field corresponds
     * to the database column innodb.innodb.imports.keywords_id.
     * 
     * @return the keywordsId of this Imports
     */
    Optional<Short> getKeywordsId();
    
    /**
     * Returns the pathId of this Imports. The pathId field corresponds to the
     * database column innodb.innodb.imports.path_id.
     * 
     * @return the pathId of this Imports
     */
    Optional<Short> getPathId();
    
    /**
     * Returns the location of this Imports. The location field corresponds to
     * the database column innodb.innodb.imports.location.
     * 
     * @return the location of this Imports
     */
    Optional<String> getLocation();
    
    /**
     * Returns the primaryCategory of this Imports. The primaryCategory field
     * corresponds to the database column innodb.innodb.imports.primaryCategory.
     * 
     * @return the primaryCategory of this Imports
     */
    Optional<String> getPrimaryCategory();
    
    /**
     * Returns the secondaryCategory of this Imports. The secondaryCategory
     * field corresponds to the database column
     * innodb.innodb.imports.secondaryCategory.
     * 
     * @return the secondaryCategory of this Imports
     */
    Optional<String> getSecondaryCategory();
    
    /**
     * Returns the takenOn of this Imports. The takenOn field corresponds to the
     * database column innodb.innodb.imports.taken_on.
     * 
     * @return the takenOn of this Imports
     */
    Optional<String> getTakenOn();
    
    /**
     * Returns the id1 of this Imports. The id1 field corresponds to the
     * database column innodb.innodb.imports.id:1.
     * 
     * @return the id1 of this Imports
     */
    OptionalInt getId1();
    
    /**
     * Returns the filename of this Imports. The filename field corresponds to
     * the database column innodb.innodb.imports.filename.
     * 
     * @return the filename of this Imports
     */
    Optional<String> getFilename();
    
    /**
     * Returns the imageRef of this Imports. The imageRef field corresponds to
     * the database column innodb.innodb.imports.imageRef.
     * 
     * @return the imageRef of this Imports
     */
    Optional<String> getImageRef();
    
    /**
     * Returns the caption of this Imports. The caption field corresponds to the
     * database column innodb.innodb.imports.caption.
     * 
     * @return the caption of this Imports
     */
    Optional<String> getCaption();
    
    /**
     * Returns the tags of this Imports. The tags field corresponds to the
     * database column innodb.innodb.imports.tags.
     * 
     * @return the tags of this Imports
     */
    Optional<String> getTags();
    
    /**
     * Returns the licenseType of this Imports. The licenseType field
     * corresponds to the database column innodb.innodb.imports.licenseType.
     * 
     * @return the licenseType of this Imports
     */
    Optional<String> getLicenseType();
    
    /**
     * Returns the userName of this Imports. The userName field corresponds to
     * the database column innodb.innodb.imports.userName.
     * 
     * @return the userName of this Imports
     */
    Optional<String> getUserName();
    
    /**
     * Returns the superTags of this Imports. The superTags field corresponds to
     * the database column innodb.innodb.imports.superTags.
     * 
     * @return the superTags of this Imports
     */
    Optional<String> getSuperTags();
    
    /**
     * Returns the location1 of this Imports. The location1 field corresponds to
     * the database column innodb.innodb.imports.location:1.
     * 
     * @return the location1 of this Imports
     */
    Optional<String> getLocation1();
    
    /**
     * Returns the numberOfPeople of this Imports. The numberOfPeople field
     * corresponds to the database column innodb.innodb.imports.numberOfPeople.
     * 
     * @return the numberOfPeople of this Imports
     */
    Optional<Byte> getNumberOfPeople();
    
    /**
     * Returns the modelRelease of this Imports. The modelRelease field
     * corresponds to the database column innodb.innodb.imports.modelRelease.
     * 
     * @return the modelRelease of this Imports
     */
    Optional<String> getModelRelease();
    
    /**
     * Returns the isThereProperty of this Imports. The isThereProperty field
     * corresponds to the database column innodb.innodb.imports.isThereProperty.
     * 
     * @return the isThereProperty of this Imports
     */
    Optional<String> getIsThereProperty();
    
    /**
     * Returns the propertyRelease of this Imports. The propertyRelease field
     * corresponds to the database column innodb.innodb.imports.propertyRelease.
     * 
     * @return the propertyRelease of this Imports
     */
    Optional<String> getPropertyRelease();
    
    /**
     * Returns the primaryCategory1 of this Imports. The primaryCategory1 field
     * corresponds to the database column
     * innodb.innodb.imports.primaryCategory:1.
     * 
     * @return the primaryCategory1 of this Imports
     */
    Optional<String> getPrimaryCategory1();
    
    /**
     * Returns the secondaryCategory1 of this Imports. The secondaryCategory1
     * field corresponds to the database column
     * innodb.innodb.imports.secondaryCategory:1.
     * 
     * @return the secondaryCategory1 of this Imports
     */
    Optional<String> getSecondaryCategory1();
    
    /**
     * Returns the imageType of this Imports. The imageType field corresponds to
     * the database column innodb.innodb.imports.imageType.
     * 
     * @return the imageType of this Imports
     */
    Optional<String> getImageType();
    
    /**
     * Returns the exclusiveToAlamy of this Imports. The exclusiveToAlamy field
     * corresponds to the database column
     * innodb.innodb.imports.exclusiveToAlamy.
     * 
     * @return the exclusiveToAlamy of this Imports
     */
    Optional<String> getExclusiveToAlamy();
    
    /**
     * Returns the additionalInfo of this Imports. The additionalInfo field
     * corresponds to the database column innodb.innodb.imports.additionalInfo.
     * 
     * @return the additionalInfo of this Imports
     */
    Optional<String> getAdditionalInfo();
    
    /**
     * Returns the status of this Imports. The status field corresponds to the
     * database column innodb.innodb.imports.status.
     * 
     * @return the status of this Imports
     */
    Optional<String> getStatus();
    
    /**
     * Returns the dateTaken of this Imports. The dateTaken field corresponds to
     * the database column innodb.innodb.imports.dateTaken.
     * 
     * @return the dateTaken of this Imports
     */
    Optional<String> getDateTaken();
    
    /**
     * Returns the taken of this Imports. The taken field corresponds to the
     * database column innodb.innodb.imports.taken.
     * 
     * @return the taken of this Imports
     */
    Optional<String> getTaken();
    
    /**
     * Returns the shot of this Imports. The shot field corresponds to the
     * database column innodb.innodb.imports.shot.
     * 
     * @return the shot of this Imports
     */
    Optional<String> getShot();
    
    /**
     * Sets the id of this Imports. The id field corresponds to the database
     * column innodb.innodb.imports.id.
     * 
     * @param id to set of this Imports
     * @return   this Imports instance
     */
    Imports setId(Integer id);
    
    /**
     * Sets the file of this Imports. The file field corresponds to the database
     * column innodb.innodb.imports.file.
     * 
     * @param file to set of this Imports
     * @return     this Imports instance
     */
    Imports setFile(String file);
    
    /**
     * Sets the title of this Imports. The title field corresponds to the
     * database column innodb.innodb.imports.title.
     * 
     * @param title to set of this Imports
     * @return      this Imports instance
     */
    Imports setTitle(String title);
    
    /**
     * Sets the sortkey of this Imports. The sortkey field corresponds to the
     * database column innodb.innodb.imports.sortkey.
     * 
     * @param sortkey to set of this Imports
     * @return        this Imports instance
     */
    Imports setSortkey(String sortkey);
    
    /**
     * Sets the addedOn of this Imports. The addedOn field corresponds to the
     * database column innodb.innodb.imports.added_on.
     * 
     * @param addedOn to set of this Imports
     * @return        this Imports instance
     */
    Imports setAddedOn(String addedOn);
    
    /**
     * Sets the lastModified of this Imports. The lastModified field corresponds
     * to the database column innodb.innodb.imports.last_modified.
     * 
     * @param lastModified to set of this Imports
     * @return             this Imports instance
     */
    Imports setLastModified(String lastModified);
    
    /**
     * Sets the keywordsId of this Imports. The keywordsId field corresponds to
     * the database column innodb.innodb.imports.keywords_id.
     * 
     * @param keywordsId to set of this Imports
     * @return           this Imports instance
     */
    Imports setKeywordsId(Short keywordsId);
    
    /**
     * Sets the pathId of this Imports. The pathId field corresponds to the
     * database column innodb.innodb.imports.path_id.
     * 
     * @param pathId to set of this Imports
     * @return       this Imports instance
     */
    Imports setPathId(Short pathId);
    
    /**
     * Sets the location of this Imports. The location field corresponds to the
     * database column innodb.innodb.imports.location.
     * 
     * @param location to set of this Imports
     * @return         this Imports instance
     */
    Imports setLocation(String location);
    
    /**
     * Sets the primaryCategory of this Imports. The primaryCategory field
     * corresponds to the database column innodb.innodb.imports.primaryCategory.
     * 
     * @param primaryCategory to set of this Imports
     * @return                this Imports instance
     */
    Imports setPrimaryCategory(String primaryCategory);
    
    /**
     * Sets the secondaryCategory of this Imports. The secondaryCategory field
     * corresponds to the database column
     * innodb.innodb.imports.secondaryCategory.
     * 
     * @param secondaryCategory to set of this Imports
     * @return                  this Imports instance
     */
    Imports setSecondaryCategory(String secondaryCategory);
    
    /**
     * Sets the takenOn of this Imports. The takenOn field corresponds to the
     * database column innodb.innodb.imports.taken_on.
     * 
     * @param takenOn to set of this Imports
     * @return        this Imports instance
     */
    Imports setTakenOn(String takenOn);
    
    /**
     * Sets the id1 of this Imports. The id1 field corresponds to the database
     * column innodb.innodb.imports.id:1.
     * 
     * @param id1 to set of this Imports
     * @return    this Imports instance
     */
    Imports setId1(Integer id1);
    
    /**
     * Sets the filename of this Imports. The filename field corresponds to the
     * database column innodb.innodb.imports.filename.
     * 
     * @param filename to set of this Imports
     * @return         this Imports instance
     */
    Imports setFilename(String filename);
    
    /**
     * Sets the imageRef of this Imports. The imageRef field corresponds to the
     * database column innodb.innodb.imports.imageRef.
     * 
     * @param imageRef to set of this Imports
     * @return         this Imports instance
     */
    Imports setImageRef(String imageRef);
    
    /**
     * Sets the caption of this Imports. The caption field corresponds to the
     * database column innodb.innodb.imports.caption.
     * 
     * @param caption to set of this Imports
     * @return        this Imports instance
     */
    Imports setCaption(String caption);
    
    /**
     * Sets the tags of this Imports. The tags field corresponds to the database
     * column innodb.innodb.imports.tags.
     * 
     * @param tags to set of this Imports
     * @return     this Imports instance
     */
    Imports setTags(String tags);
    
    /**
     * Sets the licenseType of this Imports. The licenseType field corresponds
     * to the database column innodb.innodb.imports.licenseType.
     * 
     * @param licenseType to set of this Imports
     * @return            this Imports instance
     */
    Imports setLicenseType(String licenseType);
    
    /**
     * Sets the userName of this Imports. The userName field corresponds to the
     * database column innodb.innodb.imports.userName.
     * 
     * @param userName to set of this Imports
     * @return         this Imports instance
     */
    Imports setUserName(String userName);
    
    /**
     * Sets the superTags of this Imports. The superTags field corresponds to
     * the database column innodb.innodb.imports.superTags.
     * 
     * @param superTags to set of this Imports
     * @return          this Imports instance
     */
    Imports setSuperTags(String superTags);
    
    /**
     * Sets the location1 of this Imports. The location1 field corresponds to
     * the database column innodb.innodb.imports.location:1.
     * 
     * @param location1 to set of this Imports
     * @return          this Imports instance
     */
    Imports setLocation1(String location1);
    
    /**
     * Sets the numberOfPeople of this Imports. The numberOfPeople field
     * corresponds to the database column innodb.innodb.imports.numberOfPeople.
     * 
     * @param numberOfPeople to set of this Imports
     * @return               this Imports instance
     */
    Imports setNumberOfPeople(Byte numberOfPeople);
    
    /**
     * Sets the modelRelease of this Imports. The modelRelease field corresponds
     * to the database column innodb.innodb.imports.modelRelease.
     * 
     * @param modelRelease to set of this Imports
     * @return             this Imports instance
     */
    Imports setModelRelease(String modelRelease);
    
    /**
     * Sets the isThereProperty of this Imports. The isThereProperty field
     * corresponds to the database column innodb.innodb.imports.isThereProperty.
     * 
     * @param isThereProperty to set of this Imports
     * @return                this Imports instance
     */
    Imports setIsThereProperty(String isThereProperty);
    
    /**
     * Sets the propertyRelease of this Imports. The propertyRelease field
     * corresponds to the database column innodb.innodb.imports.propertyRelease.
     * 
     * @param propertyRelease to set of this Imports
     * @return                this Imports instance
     */
    Imports setPropertyRelease(String propertyRelease);
    
    /**
     * Sets the primaryCategory1 of this Imports. The primaryCategory1 field
     * corresponds to the database column
     * innodb.innodb.imports.primaryCategory:1.
     * 
     * @param primaryCategory1 to set of this Imports
     * @return                 this Imports instance
     */
    Imports setPrimaryCategory1(String primaryCategory1);
    
    /**
     * Sets the secondaryCategory1 of this Imports. The secondaryCategory1 field
     * corresponds to the database column
     * innodb.innodb.imports.secondaryCategory:1.
     * 
     * @param secondaryCategory1 to set of this Imports
     * @return                   this Imports instance
     */
    Imports setSecondaryCategory1(String secondaryCategory1);
    
    /**
     * Sets the imageType of this Imports. The imageType field corresponds to
     * the database column innodb.innodb.imports.imageType.
     * 
     * @param imageType to set of this Imports
     * @return          this Imports instance
     */
    Imports setImageType(String imageType);
    
    /**
     * Sets the exclusiveToAlamy of this Imports. The exclusiveToAlamy field
     * corresponds to the database column
     * innodb.innodb.imports.exclusiveToAlamy.
     * 
     * @param exclusiveToAlamy to set of this Imports
     * @return                 this Imports instance
     */
    Imports setExclusiveToAlamy(String exclusiveToAlamy);
    
    /**
     * Sets the additionalInfo of this Imports. The additionalInfo field
     * corresponds to the database column innodb.innodb.imports.additionalInfo.
     * 
     * @param additionalInfo to set of this Imports
     * @return               this Imports instance
     */
    Imports setAdditionalInfo(String additionalInfo);
    
    /**
     * Sets the status of this Imports. The status field corresponds to the
     * database column innodb.innodb.imports.status.
     * 
     * @param status to set of this Imports
     * @return       this Imports instance
     */
    Imports setStatus(String status);
    
    /**
     * Sets the dateTaken of this Imports. The dateTaken field corresponds to
     * the database column innodb.innodb.imports.dateTaken.
     * 
     * @param dateTaken to set of this Imports
     * @return          this Imports instance
     */
    Imports setDateTaken(String dateTaken);
    
    /**
     * Sets the taken of this Imports. The taken field corresponds to the
     * database column innodb.innodb.imports.taken.
     * 
     * @param taken to set of this Imports
     * @return      this Imports instance
     */
    Imports setTaken(String taken);
    
    /**
     * Sets the shot of this Imports. The shot field corresponds to the database
     * column innodb.innodb.imports.shot.
     * 
     * @param shot to set of this Imports
     * @return     this Imports instance
     */
    Imports setShot(String shot);
    
    enum Identifier implements ColumnIdentifier<Imports> {
        
        ID                  ("id"),
        FILE                ("file"),
        TITLE               ("title"),
        SORTKEY             ("sortkey"),
        ADDED_ON            ("added_on"),
        LAST_MODIFIED       ("last_modified"),
        KEYWORDS_ID         ("keywords_id"),
        PATH_ID             ("path_id"),
        LOCATION            ("location"),
        PRIMARY_CATEGORY    ("primaryCategory"),
        SECONDARY_CATEGORY  ("secondaryCategory"),
        TAKEN_ON            ("taken_on"),
        ID1                 ("id:1"),
        FILENAME            ("filename"),
        IMAGE_REF           ("imageRef"),
        CAPTION             ("caption"),
        TAGS                ("tags"),
        LICENSE_TYPE        ("licenseType"),
        USER_NAME           ("userName"),
        SUPER_TAGS          ("superTags"),
        LOCATION1           ("location:1"),
        NUMBER_OF_PEOPLE    ("numberOfPeople"),
        MODEL_RELEASE       ("modelRelease"),
        IS_THERE_PROPERTY   ("isThereProperty"),
        PROPERTY_RELEASE    ("propertyRelease"),
        PRIMARY_CATEGORY1   ("primaryCategory:1"),
        SECONDARY_CATEGORY1 ("secondaryCategory:1"),
        IMAGE_TYPE          ("imageType"),
        EXCLUSIVE_TO_ALAMY  ("exclusiveToAlamy"),
        ADDITIONAL_INFO     ("additionalInfo"),
        STATUS              ("status"),
        DATE_TAKEN          ("dateTaken"),
        TAKEN               ("taken"),
        SHOT                ("shot");
        
        private final String columnId;
        private final TableIdentifier<Imports> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "imports";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Imports> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}