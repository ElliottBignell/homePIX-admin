package com.elliottbignell.homepix.innodb.innodb.auth_user_groups.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_user_groups.AuthUserGroups;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_user_groups.AuthUserGroups}-interface
 * representing entities of the {@code auth_user_groups}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthUserGroups {
    
    /**
     * This Field corresponds to the {@link AuthUserGroups} field that can be
     * obtained using the {@link AuthUserGroups#getId()} method.
     */
    StringField<AuthUserGroups, String> ID = DatastoreFields.createStringField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        AuthUserGroups::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthUserGroups} field that can be
     * obtained using the {@link AuthUserGroups#getUserId()} method.
     */
    StringField<AuthUserGroups, String> USER_ID = DatastoreFields.createStringField(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        AuthUserGroups::setUserId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthUserGroups} field that can be
     * obtained using the {@link AuthUserGroups#getGroupId()} method.
     */
    StringField<AuthUserGroups, String> GROUP_ID = DatastoreFields.createStringField(
        Identifier.GROUP_ID,
        o -> OptionalUtil.unwrap(o.getGroupId()),
        AuthUserGroups::setGroupId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AuthUserGroups. The id field corresponds to the
     * database column innodb.innodb.auth_user_groups.id.
     * 
     * @return the id of this AuthUserGroups
     */
    Optional<String> getId();
    
    /**
     * Returns the userId of this AuthUserGroups. The userId field corresponds
     * to the database column innodb.innodb.auth_user_groups.user_id.
     * 
     * @return the userId of this AuthUserGroups
     */
    Optional<String> getUserId();
    
    /**
     * Returns the groupId of this AuthUserGroups. The groupId field corresponds
     * to the database column innodb.innodb.auth_user_groups.group_id.
     * 
     * @return the groupId of this AuthUserGroups
     */
    Optional<String> getGroupId();
    
    /**
     * Sets the id of this AuthUserGroups. The id field corresponds to the
     * database column innodb.innodb.auth_user_groups.id.
     * 
     * @param id to set of this AuthUserGroups
     * @return   this AuthUserGroups instance
     */
    AuthUserGroups setId(String id);
    
    /**
     * Sets the userId of this AuthUserGroups. The userId field corresponds to
     * the database column innodb.innodb.auth_user_groups.user_id.
     * 
     * @param userId to set of this AuthUserGroups
     * @return       this AuthUserGroups instance
     */
    AuthUserGroups setUserId(String userId);
    
    /**
     * Sets the groupId of this AuthUserGroups. The groupId field corresponds to
     * the database column innodb.innodb.auth_user_groups.group_id.
     * 
     * @param groupId to set of this AuthUserGroups
     * @return        this AuthUserGroups instance
     */
    AuthUserGroups setGroupId(String groupId);
    
    enum Identifier implements ColumnIdentifier<AuthUserGroups> {
        
        ID       ("id"),
        USER_ID  ("user_id"),
        GROUP_ID ("group_id");
        
        private final String columnId;
        private final TableIdentifier<AuthUserGroups> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "auth_user_groups";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AuthUserGroups> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}