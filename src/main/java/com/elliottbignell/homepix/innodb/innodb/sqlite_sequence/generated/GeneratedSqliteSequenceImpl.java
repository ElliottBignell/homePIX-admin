package com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.generated;

import com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequence;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequence}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSqliteSequenceImpl implements SqliteSequence {
    
    private String name;
    private Integer seq;
    
    protected GeneratedSqliteSequenceImpl() {}
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public OptionalInt getSeq() {
        return OptionalUtil.ofNullable(seq);
    }
    
    @Override
    public SqliteSequence setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public SqliteSequence setSeq(Integer seq) {
        this.seq = seq;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("name = " + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("seq = "  + Objects.toString(OptionalUtil.unwrap(getSeq())));
        return "SqliteSequenceImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof SqliteSequence)) { return false; }
        final SqliteSequence thatSqliteSequence = (SqliteSequence)that;
        if (!Objects.equals(this.getName(), thatSqliteSequence.getName())) { return false; }
        if (!Objects.equals(this.getSeq(), thatSqliteSequence.getSeq())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSeq()));
        return hash;
    }
}