package com.elliottbignell.homepix.innodb.innodb.albumview.generated;

import com.elliottbignell.homepix.innodb.innodb.albumview.AlbumView;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.albumview.AlbumView}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAlbumViewImpl implements AlbumView {
    
    private Short id;
    private Byte albumId;
    private Integer entryId;
    private Integer id1;
    private String file;
    private String title;
    private String sortkey;
    private String addedOn;
    private String takenOn;
    private String lastModified;
    private String location;
    private String primaryCategory;
    private String secondaryCategory;
    private String keywordsId;
    private Short pathId;
    private Byte hits;
    private Byte id2;
    private String name;
    private Byte count;
    private Integer thumbnailId;
    private Byte hits1;
    
    protected GeneratedAlbumViewImpl() {}
    
    @Override
    public Optional<Short> getId() {
        return Optional.ofNullable(id);
    }
    
    @Override
    public Optional<Byte> getAlbumId() {
        return Optional.ofNullable(albumId);
    }
    
    @Override
    public OptionalInt getEntryId() {
        return OptionalUtil.ofNullable(entryId);
    }
    
    @Override
    public OptionalInt getId1() {
        return OptionalUtil.ofNullable(id1);
    }
    
    @Override
    public Optional<String> getFile() {
        return Optional.ofNullable(file);
    }
    
    @Override
    public Optional<String> getTitle() {
        return Optional.ofNullable(title);
    }
    
    @Override
    public Optional<String> getSortkey() {
        return Optional.ofNullable(sortkey);
    }
    
    @Override
    public Optional<String> getAddedOn() {
        return Optional.ofNullable(addedOn);
    }
    
    @Override
    public Optional<String> getTakenOn() {
        return Optional.ofNullable(takenOn);
    }
    
    @Override
    public Optional<String> getLastModified() {
        return Optional.ofNullable(lastModified);
    }
    
    @Override
    public Optional<String> getLocation() {
        return Optional.ofNullable(location);
    }
    
    @Override
    public Optional<String> getPrimaryCategory() {
        return Optional.ofNullable(primaryCategory);
    }
    
    @Override
    public Optional<String> getSecondaryCategory() {
        return Optional.ofNullable(secondaryCategory);
    }
    
    @Override
    public Optional<String> getKeywordsId() {
        return Optional.ofNullable(keywordsId);
    }
    
    @Override
    public Optional<Short> getPathId() {
        return Optional.ofNullable(pathId);
    }
    
    @Override
    public Optional<Byte> getHits() {
        return Optional.ofNullable(hits);
    }
    
    @Override
    public Optional<Byte> getId2() {
        return Optional.ofNullable(id2);
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public Optional<Byte> getCount() {
        return Optional.ofNullable(count);
    }
    
    @Override
    public OptionalInt getThumbnailId() {
        return OptionalUtil.ofNullable(thumbnailId);
    }
    
    @Override
    public Optional<Byte> getHits1() {
        return Optional.ofNullable(hits1);
    }
    
    @Override
    public AlbumView setId(Short id) {
        this.id = id;
        return this;
    }
    
    @Override
    public AlbumView setAlbumId(Byte albumId) {
        this.albumId = albumId;
        return this;
    }
    
    @Override
    public AlbumView setEntryId(Integer entryId) {
        this.entryId = entryId;
        return this;
    }
    
    @Override
    public AlbumView setId1(Integer id1) {
        this.id1 = id1;
        return this;
    }
    
    @Override
    public AlbumView setFile(String file) {
        this.file = file;
        return this;
    }
    
    @Override
    public AlbumView setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public AlbumView setSortkey(String sortkey) {
        this.sortkey = sortkey;
        return this;
    }
    
    @Override
    public AlbumView setAddedOn(String addedOn) {
        this.addedOn = addedOn;
        return this;
    }
    
    @Override
    public AlbumView setTakenOn(String takenOn) {
        this.takenOn = takenOn;
        return this;
    }
    
    @Override
    public AlbumView setLastModified(String lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    @Override
    public AlbumView setLocation(String location) {
        this.location = location;
        return this;
    }
    
    @Override
    public AlbumView setPrimaryCategory(String primaryCategory) {
        this.primaryCategory = primaryCategory;
        return this;
    }
    
    @Override
    public AlbumView setSecondaryCategory(String secondaryCategory) {
        this.secondaryCategory = secondaryCategory;
        return this;
    }
    
    @Override
    public AlbumView setKeywordsId(String keywordsId) {
        this.keywordsId = keywordsId;
        return this;
    }
    
    @Override
    public AlbumView setPathId(Short pathId) {
        this.pathId = pathId;
        return this;
    }
    
    @Override
    public AlbumView setHits(Byte hits) {
        this.hits = hits;
        return this;
    }
    
    @Override
    public AlbumView setId2(Byte id2) {
        this.id2 = id2;
        return this;
    }
    
    @Override
    public AlbumView setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public AlbumView setCount(Byte count) {
        this.count = count;
        return this;
    }
    
    @Override
    public AlbumView setThumbnailId(Integer thumbnailId) {
        this.thumbnailId = thumbnailId;
        return this;
    }
    
    @Override
    public AlbumView setHits1(Byte hits1) {
        this.hits1 = hits1;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "                + Objects.toString(OptionalUtil.unwrap(getId())));
        sj.add("albumId = "           + Objects.toString(OptionalUtil.unwrap(getAlbumId())));
        sj.add("entryId = "           + Objects.toString(OptionalUtil.unwrap(getEntryId())));
        sj.add("id1 = "               + Objects.toString(OptionalUtil.unwrap(getId1())));
        sj.add("file = "              + Objects.toString(OptionalUtil.unwrap(getFile())));
        sj.add("title = "             + Objects.toString(OptionalUtil.unwrap(getTitle())));
        sj.add("sortkey = "           + Objects.toString(OptionalUtil.unwrap(getSortkey())));
        sj.add("addedOn = "           + Objects.toString(OptionalUtil.unwrap(getAddedOn())));
        sj.add("takenOn = "           + Objects.toString(OptionalUtil.unwrap(getTakenOn())));
        sj.add("lastModified = "      + Objects.toString(OptionalUtil.unwrap(getLastModified())));
        sj.add("location = "          + Objects.toString(OptionalUtil.unwrap(getLocation())));
        sj.add("primaryCategory = "   + Objects.toString(OptionalUtil.unwrap(getPrimaryCategory())));
        sj.add("secondaryCategory = " + Objects.toString(OptionalUtil.unwrap(getSecondaryCategory())));
        sj.add("keywordsId = "        + Objects.toString(OptionalUtil.unwrap(getKeywordsId())));
        sj.add("pathId = "            + Objects.toString(OptionalUtil.unwrap(getPathId())));
        sj.add("hits = "              + Objects.toString(OptionalUtil.unwrap(getHits())));
        sj.add("id2 = "               + Objects.toString(OptionalUtil.unwrap(getId2())));
        sj.add("name = "              + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("count = "             + Objects.toString(OptionalUtil.unwrap(getCount())));
        sj.add("thumbnailId = "       + Objects.toString(OptionalUtil.unwrap(getThumbnailId())));
        sj.add("hits1 = "             + Objects.toString(OptionalUtil.unwrap(getHits1())));
        return "AlbumViewImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof AlbumView)) { return false; }
        final AlbumView thatAlbumView = (AlbumView)that;
        if (!Objects.equals(this.getId(), thatAlbumView.getId())) { return false; }
        if (!Objects.equals(this.getAlbumId(), thatAlbumView.getAlbumId())) { return false; }
        if (!Objects.equals(this.getEntryId(), thatAlbumView.getEntryId())) { return false; }
        if (!Objects.equals(this.getId1(), thatAlbumView.getId1())) { return false; }
        if (!Objects.equals(this.getFile(), thatAlbumView.getFile())) { return false; }
        if (!Objects.equals(this.getTitle(), thatAlbumView.getTitle())) { return false; }
        if (!Objects.equals(this.getSortkey(), thatAlbumView.getSortkey())) { return false; }
        if (!Objects.equals(this.getAddedOn(), thatAlbumView.getAddedOn())) { return false; }
        if (!Objects.equals(this.getTakenOn(), thatAlbumView.getTakenOn())) { return false; }
        if (!Objects.equals(this.getLastModified(), thatAlbumView.getLastModified())) { return false; }
        if (!Objects.equals(this.getLocation(), thatAlbumView.getLocation())) { return false; }
        if (!Objects.equals(this.getPrimaryCategory(), thatAlbumView.getPrimaryCategory())) { return false; }
        if (!Objects.equals(this.getSecondaryCategory(), thatAlbumView.getSecondaryCategory())) { return false; }
        if (!Objects.equals(this.getKeywordsId(), thatAlbumView.getKeywordsId())) { return false; }
        if (!Objects.equals(this.getPathId(), thatAlbumView.getPathId())) { return false; }
        if (!Objects.equals(this.getHits(), thatAlbumView.getHits())) { return false; }
        if (!Objects.equals(this.getId2(), thatAlbumView.getId2())) { return false; }
        if (!Objects.equals(this.getName(), thatAlbumView.getName())) { return false; }
        if (!Objects.equals(this.getCount(), thatAlbumView.getCount())) { return false; }
        if (!Objects.equals(this.getThumbnailId(), thatAlbumView.getThumbnailId())) { return false; }
        if (!Objects.equals(this.getHits1(), thatAlbumView.getHits1())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAlbumId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEntryId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId1()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFile()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTitle()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSortkey()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAddedOn()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTakenOn()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLastModified()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLocation()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPrimaryCategory()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSecondaryCategory()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getKeywordsId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPathId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHits()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId2()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCount()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getThumbnailId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHits1()));
        return hash;
    }
}