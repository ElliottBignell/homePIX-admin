package com.elliottbignell.homepix.innodb.innodb.homepix_keywords.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_keywords.HomePixKeywords;
import com.elliottbignell.homepix.innodb.innodb.homepix_keywords.HomePixKeywordsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.elliottbignell.homepix.innodb.innodb.homepix_keywords.HomePixKeywords}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHomePixKeywordsSqlAdapter implements SqlAdapter<HomePixKeywords> {
    
    private final TableIdentifier<HomePixKeywords> tableIdentifier;
    
    protected GeneratedHomePixKeywordsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("innodb", "innodb", "homePIX_keywords");
    }
    
    protected HomePixKeywords apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(       getShort(resultSet, 1 + offset))
            .setKeywords( resultSet.getString(2 + offset))
            .setCount(    getByte(resultSet, 3 + offset))
            ;
    }
    
    protected HomePixKeywordsImpl createEntity() {
        return new HomePixKeywordsImpl();
    }
    
    @Override
    public TableIdentifier<HomePixKeywords> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, HomePixKeywords> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, HomePixKeywords> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}