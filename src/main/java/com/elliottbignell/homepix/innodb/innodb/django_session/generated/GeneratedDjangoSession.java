package com.elliottbignell.homepix.innodb.innodb.django_session.generated;

import com.elliottbignell.homepix.innodb.innodb.django_session.DjangoSession;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.django_session.DjangoSession}-interface
 * representing entities of the {@code django_session}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedDjangoSession {
    
    /**
     * This Field corresponds to the {@link DjangoSession} field that can be
     * obtained using the {@link DjangoSession#getSessionKey()} method.
     */
    StringField<DjangoSession, String> SESSION_KEY = DatastoreFields.createStringField(
        Identifier.SESSION_KEY,
        o -> OptionalUtil.unwrap(o.getSessionKey()),
        DjangoSession::setSessionKey,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoSession} field that can be
     * obtained using the {@link DjangoSession#getSessionData()} method.
     */
    StringField<DjangoSession, String> SESSION_DATA = DatastoreFields.createStringField(
        Identifier.SESSION_DATA,
        o -> OptionalUtil.unwrap(o.getSessionData()),
        DjangoSession::setSessionData,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoSession} field that can be
     * obtained using the {@link DjangoSession#getExpireDate()} method.
     */
    ComparableField<DjangoSession, Timestamp, Timestamp> EXPIRE_DATE = DatastoreFields.createComparableField(
        Identifier.EXPIRE_DATE,
        o -> OptionalUtil.unwrap(o.getExpireDate()),
        DjangoSession::setExpireDate,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the sessionKey of this DjangoSession. The sessionKey field
     * corresponds to the database column
     * innodb.innodb.django_session.session_key.
     * 
     * @return the sessionKey of this DjangoSession
     */
    Optional<String> getSessionKey();
    
    /**
     * Returns the sessionData of this DjangoSession. The sessionData field
     * corresponds to the database column
     * innodb.innodb.django_session.session_data.
     * 
     * @return the sessionData of this DjangoSession
     */
    Optional<String> getSessionData();
    
    /**
     * Returns the expireDate of this DjangoSession. The expireDate field
     * corresponds to the database column
     * innodb.innodb.django_session.expire_date.
     * 
     * @return the expireDate of this DjangoSession
     */
    Optional<Timestamp> getExpireDate();
    
    /**
     * Sets the sessionKey of this DjangoSession. The sessionKey field
     * corresponds to the database column
     * innodb.innodb.django_session.session_key.
     * 
     * @param sessionKey to set of this DjangoSession
     * @return           this DjangoSession instance
     */
    DjangoSession setSessionKey(String sessionKey);
    
    /**
     * Sets the sessionData of this DjangoSession. The sessionData field
     * corresponds to the database column
     * innodb.innodb.django_session.session_data.
     * 
     * @param sessionData to set of this DjangoSession
     * @return            this DjangoSession instance
     */
    DjangoSession setSessionData(String sessionData);
    
    /**
     * Sets the expireDate of this DjangoSession. The expireDate field
     * corresponds to the database column
     * innodb.innodb.django_session.expire_date.
     * 
     * @param expireDate to set of this DjangoSession
     * @return           this DjangoSession instance
     */
    DjangoSession setExpireDate(Timestamp expireDate);
    
    enum Identifier implements ColumnIdentifier<DjangoSession> {
        
        SESSION_KEY  ("session_key"),
        SESSION_DATA ("session_data"),
        EXPIRE_DATE  ("expire_date");
        
        private final String columnId;
        private final TableIdentifier<DjangoSession> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "django_session";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<DjangoSession> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}