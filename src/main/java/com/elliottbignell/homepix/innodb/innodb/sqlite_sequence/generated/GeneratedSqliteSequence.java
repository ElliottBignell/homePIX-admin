package com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.generated;

import com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequence;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequence}-interface
 * representing entities of the {@code sqlite_sequence}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedSqliteSequence {
    
    /**
     * This Field corresponds to the {@link SqliteSequence} field that can be
     * obtained using the {@link SqliteSequence#getName()} method.
     */
    StringField<SqliteSequence, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        SqliteSequence::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SqliteSequence} field that can be
     * obtained using the {@link SqliteSequence#getSeq()} method.
     */
    ComparableField<SqliteSequence, Integer, Integer> SEQ = DatastoreFields.createComparableField(
        Identifier.SEQ,
        o -> OptionalUtil.unwrap(o.getSeq()),
        SqliteSequence::setSeq,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the name of this SqliteSequence. The name field corresponds to
     * the database column innodb.innodb.sqlite_sequence.name.
     * 
     * @return the name of this SqliteSequence
     */
    Optional<String> getName();
    
    /**
     * Returns the seq of this SqliteSequence. The seq field corresponds to the
     * database column innodb.innodb.sqlite_sequence.seq.
     * 
     * @return the seq of this SqliteSequence
     */
    OptionalInt getSeq();
    
    /**
     * Sets the name of this SqliteSequence. The name field corresponds to the
     * database column innodb.innodb.sqlite_sequence.name.
     * 
     * @param name to set of this SqliteSequence
     * @return     this SqliteSequence instance
     */
    SqliteSequence setName(String name);
    
    /**
     * Sets the seq of this SqliteSequence. The seq field corresponds to the
     * database column innodb.innodb.sqlite_sequence.seq.
     * 
     * @param seq to set of this SqliteSequence
     * @return    this SqliteSequence instance
     */
    SqliteSequence setSeq(Integer seq);
    
    enum Identifier implements ColumnIdentifier<SqliteSequence> {
        
        NAME ("name"),
        SEQ  ("seq");
        
        private final String columnId;
        private final TableIdentifier<SqliteSequence> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "sqlite_sequence";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<SqliteSequence> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}