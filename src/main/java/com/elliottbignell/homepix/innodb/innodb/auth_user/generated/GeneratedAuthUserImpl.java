package com.elliottbignell.homepix.innodb.innodb.auth_user.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_user.AuthUser;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_user.AuthUser}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAuthUserImpl implements AuthUser {
    
    private Byte id;
    private String password;
    private String lastLogin;
    private Byte isSuperuser;
    private String username;
    private String lastName;
    private String email;
    private Byte isStaff;
    private Byte isActive;
    private String dateJoined;
    private String firstName;
    
    protected GeneratedAuthUserImpl() {}
    
    @Override
    public Optional<Byte> getId() {
        return Optional.ofNullable(id);
    }
    
    @Override
    public Optional<String> getPassword() {
        return Optional.ofNullable(password);
    }
    
    @Override
    public Optional<String> getLastLogin() {
        return Optional.ofNullable(lastLogin);
    }
    
    @Override
    public Optional<Byte> getIsSuperuser() {
        return Optional.ofNullable(isSuperuser);
    }
    
    @Override
    public Optional<String> getUsername() {
        return Optional.ofNullable(username);
    }
    
    @Override
    public Optional<String> getLastName() {
        return Optional.ofNullable(lastName);
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Optional<Byte> getIsStaff() {
        return Optional.ofNullable(isStaff);
    }
    
    @Override
    public Optional<Byte> getIsActive() {
        return Optional.ofNullable(isActive);
    }
    
    @Override
    public Optional<String> getDateJoined() {
        return Optional.ofNullable(dateJoined);
    }
    
    @Override
    public Optional<String> getFirstName() {
        return Optional.ofNullable(firstName);
    }
    
    @Override
    public AuthUser setId(Byte id) {
        this.id = id;
        return this;
    }
    
    @Override
    public AuthUser setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public AuthUser setLastLogin(String lastLogin) {
        this.lastLogin = lastLogin;
        return this;
    }
    
    @Override
    public AuthUser setIsSuperuser(Byte isSuperuser) {
        this.isSuperuser = isSuperuser;
        return this;
    }
    
    @Override
    public AuthUser setUsername(String username) {
        this.username = username;
        return this;
    }
    
    @Override
    public AuthUser setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public AuthUser setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public AuthUser setIsStaff(Byte isStaff) {
        this.isStaff = isStaff;
        return this;
    }
    
    @Override
    public AuthUser setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }
    
    @Override
    public AuthUser setDateJoined(String dateJoined) {
        this.dateJoined = dateJoined;
        return this;
    }
    
    @Override
    public AuthUser setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(OptionalUtil.unwrap(getId())));
        sj.add("password = "    + Objects.toString(OptionalUtil.unwrap(getPassword())));
        sj.add("lastLogin = "   + Objects.toString(OptionalUtil.unwrap(getLastLogin())));
        sj.add("isSuperuser = " + Objects.toString(OptionalUtil.unwrap(getIsSuperuser())));
        sj.add("username = "    + Objects.toString(OptionalUtil.unwrap(getUsername())));
        sj.add("lastName = "    + Objects.toString(OptionalUtil.unwrap(getLastName())));
        sj.add("email = "       + Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add("isStaff = "     + Objects.toString(OptionalUtil.unwrap(getIsStaff())));
        sj.add("isActive = "    + Objects.toString(OptionalUtil.unwrap(getIsActive())));
        sj.add("dateJoined = "  + Objects.toString(OptionalUtil.unwrap(getDateJoined())));
        sj.add("firstName = "   + Objects.toString(OptionalUtil.unwrap(getFirstName())));
        return "AuthUserImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof AuthUser)) { return false; }
        final AuthUser thatAuthUser = (AuthUser)that;
        if (!Objects.equals(this.getId(), thatAuthUser.getId())) { return false; }
        if (!Objects.equals(this.getPassword(), thatAuthUser.getPassword())) { return false; }
        if (!Objects.equals(this.getLastLogin(), thatAuthUser.getLastLogin())) { return false; }
        if (!Objects.equals(this.getIsSuperuser(), thatAuthUser.getIsSuperuser())) { return false; }
        if (!Objects.equals(this.getUsername(), thatAuthUser.getUsername())) { return false; }
        if (!Objects.equals(this.getLastName(), thatAuthUser.getLastName())) { return false; }
        if (!Objects.equals(this.getEmail(), thatAuthUser.getEmail())) { return false; }
        if (!Objects.equals(this.getIsStaff(), thatAuthUser.getIsStaff())) { return false; }
        if (!Objects.equals(this.getIsActive(), thatAuthUser.getIsActive())) { return false; }
        if (!Objects.equals(this.getDateJoined(), thatAuthUser.getDateJoined())) { return false; }
        if (!Objects.equals(this.getFirstName(), thatAuthUser.getFirstName())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPassword()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLastLogin()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsSuperuser()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUsername()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLastName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEmail()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsStaff()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsActive()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDateJoined()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFirstName()));
        return hash;
    }
}