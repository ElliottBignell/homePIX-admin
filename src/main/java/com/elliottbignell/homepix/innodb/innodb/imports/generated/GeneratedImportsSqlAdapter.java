package com.elliottbignell.homepix.innodb.innodb.imports.generated;

import com.elliottbignell.homepix.innodb.innodb.imports.Imports;
import com.elliottbignell.homepix.innodb.innodb.imports.ImportsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.elliottbignell.homepix.innodb.innodb.imports.Imports} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedImportsSqlAdapter implements SqlAdapter<Imports> {
    
    private final TableIdentifier<Imports> tableIdentifier;
    
    protected GeneratedImportsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("innodb", "innodb", "imports");
    }
    
    protected Imports apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(                 getInt(resultSet, 1 + offset))
            .setFile(               resultSet.getString(2 + offset))
            .setTitle(              resultSet.getString(3 + offset))
            .setSortkey(            resultSet.getString(4 + offset))
            .setAddedOn(            resultSet.getString(5 + offset))
            .setLastModified(       resultSet.getString(6 + offset))
            .setKeywordsId(         getShort(resultSet, 7 + offset))
            .setPathId(             getShort(resultSet, 8 + offset))
            .setLocation(           resultSet.getString(9 + offset))
            .setPrimaryCategory(    resultSet.getString(10 + offset))
            .setSecondaryCategory(  resultSet.getString(11 + offset))
            .setTakenOn(            resultSet.getString(12 + offset))
            .setId1(                getInt(resultSet, 13 + offset))
            .setFilename(           resultSet.getString(14 + offset))
            .setImageRef(           resultSet.getString(15 + offset))
            .setCaption(            resultSet.getString(16 + offset))
            .setTags(               resultSet.getString(17 + offset))
            .setLicenseType(        resultSet.getString(18 + offset))
            .setUserName(           resultSet.getString(19 + offset))
            .setSuperTags(          resultSet.getString(20 + offset))
            .setLocation1(          resultSet.getString(21 + offset))
            .setNumberOfPeople(     getByte(resultSet, 22 + offset))
            .setModelRelease(       resultSet.getString(23 + offset))
            .setIsThereProperty(    resultSet.getString(24 + offset))
            .setPropertyRelease(    resultSet.getString(25 + offset))
            .setPrimaryCategory1(   resultSet.getString(26 + offset))
            .setSecondaryCategory1( resultSet.getString(27 + offset))
            .setImageType(          resultSet.getString(28 + offset))
            .setExclusiveToAlamy(   resultSet.getString(29 + offset))
            .setAdditionalInfo(     resultSet.getString(30 + offset))
            .setStatus(             resultSet.getString(31 + offset))
            .setDateTaken(          resultSet.getString(32 + offset))
            .setTaken(              resultSet.getString(33 + offset))
            .setShot(               resultSet.getString(34 + offset))
            ;
    }
    
    protected ImportsImpl createEntity() {
        return new ImportsImpl();
    }
    
    @Override
    public TableIdentifier<Imports> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Imports> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Imports> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}