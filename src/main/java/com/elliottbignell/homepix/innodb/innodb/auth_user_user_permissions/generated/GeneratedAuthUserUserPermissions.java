package com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.AuthUserUserPermissions;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.AuthUserUserPermissions}-interface
 * representing entities of the {@code auth_user_user_permissions}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthUserUserPermissions {
    
    /**
     * This Field corresponds to the {@link AuthUserUserPermissions} field that
     * can be obtained using the {@link AuthUserUserPermissions#getId()} method.
     */
    StringField<AuthUserUserPermissions, String> ID = DatastoreFields.createStringField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        AuthUserUserPermissions::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthUserUserPermissions} field that
     * can be obtained using the {@link AuthUserUserPermissions#getUserId()}
     * method.
     */
    StringField<AuthUserUserPermissions, String> USER_ID = DatastoreFields.createStringField(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        AuthUserUserPermissions::setUserId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthUserUserPermissions} field that
     * can be obtained using the {@link
     * AuthUserUserPermissions#getPermissionId()} method.
     */
    StringField<AuthUserUserPermissions, String> PERMISSION_ID = DatastoreFields.createStringField(
        Identifier.PERMISSION_ID,
        o -> OptionalUtil.unwrap(o.getPermissionId()),
        AuthUserUserPermissions::setPermissionId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AuthUserUserPermissions. The id field corresponds
     * to the database column innodb.innodb.auth_user_user_permissions.id.
     * 
     * @return the id of this AuthUserUserPermissions
     */
    Optional<String> getId();
    
    /**
     * Returns the userId of this AuthUserUserPermissions. The userId field
     * corresponds to the database column
     * innodb.innodb.auth_user_user_permissions.user_id.
     * 
     * @return the userId of this AuthUserUserPermissions
     */
    Optional<String> getUserId();
    
    /**
     * Returns the permissionId of this AuthUserUserPermissions. The
     * permissionId field corresponds to the database column
     * innodb.innodb.auth_user_user_permissions.permission_id.
     * 
     * @return the permissionId of this AuthUserUserPermissions
     */
    Optional<String> getPermissionId();
    
    /**
     * Sets the id of this AuthUserUserPermissions. The id field corresponds to
     * the database column innodb.innodb.auth_user_user_permissions.id.
     * 
     * @param id to set of this AuthUserUserPermissions
     * @return   this AuthUserUserPermissions instance
     */
    AuthUserUserPermissions setId(String id);
    
    /**
     * Sets the userId of this AuthUserUserPermissions. The userId field
     * corresponds to the database column
     * innodb.innodb.auth_user_user_permissions.user_id.
     * 
     * @param userId to set of this AuthUserUserPermissions
     * @return       this AuthUserUserPermissions instance
     */
    AuthUserUserPermissions setUserId(String userId);
    
    /**
     * Sets the permissionId of this AuthUserUserPermissions. The permissionId
     * field corresponds to the database column
     * innodb.innodb.auth_user_user_permissions.permission_id.
     * 
     * @param permissionId to set of this AuthUserUserPermissions
     * @return             this AuthUserUserPermissions instance
     */
    AuthUserUserPermissions setPermissionId(String permissionId);
    
    enum Identifier implements ColumnIdentifier<AuthUserUserPermissions> {
        
        ID            ("id"),
        USER_ID       ("user_id"),
        PERMISSION_ID ("permission_id");
        
        private final String columnId;
        private final TableIdentifier<AuthUserUserPermissions> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "auth_user_user_permissions";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AuthUserUserPermissions> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}