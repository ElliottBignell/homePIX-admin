package com.elliottbignell.homepix.innodb.innodb.auth_permission.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermission;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermission}-interface
 * representing entities of the {@code auth_permission}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthPermission {
    
    /**
     * This Field corresponds to the {@link AuthPermission} field that can be
     * obtained using the {@link AuthPermission#getId()} method.
     */
    ComparableField<AuthPermission, Byte, Byte> ID = DatastoreFields.createComparableField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        AuthPermission::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthPermission} field that can be
     * obtained using the {@link AuthPermission#getContentTypeId()} method.
     */
    ComparableField<AuthPermission, Byte, Byte> CONTENT_TYPE_ID = DatastoreFields.createComparableField(
        Identifier.CONTENT_TYPE_ID,
        o -> OptionalUtil.unwrap(o.getContentTypeId()),
        AuthPermission::setContentTypeId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthPermission} field that can be
     * obtained using the {@link AuthPermission#getCodename()} method.
     */
    StringField<AuthPermission, String> CODENAME = DatastoreFields.createStringField(
        Identifier.CODENAME,
        o -> OptionalUtil.unwrap(o.getCodename()),
        AuthPermission::setCodename,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AuthPermission} field that can be
     * obtained using the {@link AuthPermission#getName()} method.
     */
    StringField<AuthPermission, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        AuthPermission::setName,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AuthPermission. The id field corresponds to the
     * database column innodb.innodb.auth_permission.id.
     * 
     * @return the id of this AuthPermission
     */
    Optional<Byte> getId();
    
    /**
     * Returns the contentTypeId of this AuthPermission. The contentTypeId field
     * corresponds to the database column
     * innodb.innodb.auth_permission.content_type_id.
     * 
     * @return the contentTypeId of this AuthPermission
     */
    Optional<Byte> getContentTypeId();
    
    /**
     * Returns the codename of this AuthPermission. The codename field
     * corresponds to the database column
     * innodb.innodb.auth_permission.codename.
     * 
     * @return the codename of this AuthPermission
     */
    Optional<String> getCodename();
    
    /**
     * Returns the name of this AuthPermission. The name field corresponds to
     * the database column innodb.innodb.auth_permission.name.
     * 
     * @return the name of this AuthPermission
     */
    Optional<String> getName();
    
    /**
     * Sets the id of this AuthPermission. The id field corresponds to the
     * database column innodb.innodb.auth_permission.id.
     * 
     * @param id to set of this AuthPermission
     * @return   this AuthPermission instance
     */
    AuthPermission setId(Byte id);
    
    /**
     * Sets the contentTypeId of this AuthPermission. The contentTypeId field
     * corresponds to the database column
     * innodb.innodb.auth_permission.content_type_id.
     * 
     * @param contentTypeId to set of this AuthPermission
     * @return              this AuthPermission instance
     */
    AuthPermission setContentTypeId(Byte contentTypeId);
    
    /**
     * Sets the codename of this AuthPermission. The codename field corresponds
     * to the database column innodb.innodb.auth_permission.codename.
     * 
     * @param codename to set of this AuthPermission
     * @return         this AuthPermission instance
     */
    AuthPermission setCodename(String codename);
    
    /**
     * Sets the name of this AuthPermission. The name field corresponds to the
     * database column innodb.innodb.auth_permission.name.
     * 
     * @param name to set of this AuthPermission
     * @return     this AuthPermission instance
     */
    AuthPermission setName(String name);
    
    enum Identifier implements ColumnIdentifier<AuthPermission> {
        
        ID              ("id"),
        CONTENT_TYPE_ID ("content_type_id"),
        CODENAME        ("codename"),
        NAME            ("name");
        
        private final String columnId;
        private final TableIdentifier<AuthPermission> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "auth_permission";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AuthPermission> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}