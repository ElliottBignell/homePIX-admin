package com.elliottbignell.homepix.innodb.innodb.captcha_captchastore.generated;

import com.elliottbignell.homepix.innodb.innodb.captcha_captchastore.CaptchaCaptchastore;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.captcha_captchastore.CaptchaCaptchastore}-interface
 * representing entities of the {@code captcha_captchastore}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCaptchaCaptchastore {
    
    /**
     * This Field corresponds to the {@link CaptchaCaptchastore} field that can
     * be obtained using the {@link CaptchaCaptchastore#getId()} method.
     */
    StringField<CaptchaCaptchastore, String> ID = DatastoreFields.createStringField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        CaptchaCaptchastore::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CaptchaCaptchastore} field that can
     * be obtained using the {@link CaptchaCaptchastore#getChallenge()} method.
     */
    StringField<CaptchaCaptchastore, String> CHALLENGE = DatastoreFields.createStringField(
        Identifier.CHALLENGE,
        o -> OptionalUtil.unwrap(o.getChallenge()),
        CaptchaCaptchastore::setChallenge,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CaptchaCaptchastore} field that can
     * be obtained using the {@link CaptchaCaptchastore#getResponse()} method.
     */
    StringField<CaptchaCaptchastore, String> RESPONSE = DatastoreFields.createStringField(
        Identifier.RESPONSE,
        o -> OptionalUtil.unwrap(o.getResponse()),
        CaptchaCaptchastore::setResponse,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CaptchaCaptchastore} field that can
     * be obtained using the {@link CaptchaCaptchastore#getHashkey()} method.
     */
    StringField<CaptchaCaptchastore, String> HASHKEY = DatastoreFields.createStringField(
        Identifier.HASHKEY,
        o -> OptionalUtil.unwrap(o.getHashkey()),
        CaptchaCaptchastore::setHashkey,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CaptchaCaptchastore} field that can
     * be obtained using the {@link CaptchaCaptchastore#getExpiration()} method.
     */
    StringField<CaptchaCaptchastore, String> EXPIRATION = DatastoreFields.createStringField(
        Identifier.EXPIRATION,
        o -> OptionalUtil.unwrap(o.getExpiration()),
        CaptchaCaptchastore::setExpiration,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this CaptchaCaptchastore. The id field corresponds to
     * the database column innodb.innodb.captcha_captchastore.id.
     * 
     * @return the id of this CaptchaCaptchastore
     */
    Optional<String> getId();
    
    /**
     * Returns the challenge of this CaptchaCaptchastore. The challenge field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.challenge.
     * 
     * @return the challenge of this CaptchaCaptchastore
     */
    Optional<String> getChallenge();
    
    /**
     * Returns the response of this CaptchaCaptchastore. The response field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.response.
     * 
     * @return the response of this CaptchaCaptchastore
     */
    Optional<String> getResponse();
    
    /**
     * Returns the hashkey of this CaptchaCaptchastore. The hashkey field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.hashkey.
     * 
     * @return the hashkey of this CaptchaCaptchastore
     */
    Optional<String> getHashkey();
    
    /**
     * Returns the expiration of this CaptchaCaptchastore. The expiration field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.expiration.
     * 
     * @return the expiration of this CaptchaCaptchastore
     */
    Optional<String> getExpiration();
    
    /**
     * Sets the id of this CaptchaCaptchastore. The id field corresponds to the
     * database column innodb.innodb.captcha_captchastore.id.
     * 
     * @param id to set of this CaptchaCaptchastore
     * @return   this CaptchaCaptchastore instance
     */
    CaptchaCaptchastore setId(String id);
    
    /**
     * Sets the challenge of this CaptchaCaptchastore. The challenge field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.challenge.
     * 
     * @param challenge to set of this CaptchaCaptchastore
     * @return          this CaptchaCaptchastore instance
     */
    CaptchaCaptchastore setChallenge(String challenge);
    
    /**
     * Sets the response of this CaptchaCaptchastore. The response field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.response.
     * 
     * @param response to set of this CaptchaCaptchastore
     * @return         this CaptchaCaptchastore instance
     */
    CaptchaCaptchastore setResponse(String response);
    
    /**
     * Sets the hashkey of this CaptchaCaptchastore. The hashkey field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.hashkey.
     * 
     * @param hashkey to set of this CaptchaCaptchastore
     * @return        this CaptchaCaptchastore instance
     */
    CaptchaCaptchastore setHashkey(String hashkey);
    
    /**
     * Sets the expiration of this CaptchaCaptchastore. The expiration field
     * corresponds to the database column
     * innodb.innodb.captcha_captchastore.expiration.
     * 
     * @param expiration to set of this CaptchaCaptchastore
     * @return           this CaptchaCaptchastore instance
     */
    CaptchaCaptchastore setExpiration(String expiration);
    
    enum Identifier implements ColumnIdentifier<CaptchaCaptchastore> {
        
        ID         ("id"),
        CHALLENGE  ("challenge"),
        RESPONSE   ("response"),
        HASHKEY    ("hashkey"),
        EXPIRATION ("expiration");
        
        private final String columnId;
        private final TableIdentifier<CaptchaCaptchastore> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "captcha_captchastore";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<CaptchaCaptchastore> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}