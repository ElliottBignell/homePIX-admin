package com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.generated;

import com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequence;
import com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequenceImpl;
import com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequenceManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.AbstractManager;
import com.speedment.runtime.field.Field;

import java.util.stream.Stream;

/**
 * The generated base implementation for the manager of every {@link
 * com.elliottbignell.homepix.innodb.innodb.sqlite_sequence.SqliteSequence}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSqliteSequenceManagerImpl 
extends AbstractManager<SqliteSequence> 
implements GeneratedSqliteSequenceManager {
    
    private final TableIdentifier<SqliteSequence> tableIdentifier;
    
    protected GeneratedSqliteSequenceManagerImpl() {
        this.tableIdentifier = TableIdentifier.of("innodb", "innodb", "sqlite_sequence");
    }
    
    @Override
    public SqliteSequence create() {
        return new SqliteSequenceImpl();
    }
    
    @Override
    public TableIdentifier<SqliteSequence> getTableIdentifier() {
        return tableIdentifier;
    }
    
    @Override
    public Stream<Field<SqliteSequence>> fields() {
        return SqliteSequenceManager.FIELDS.stream();
    }
    
    @Override
    public Stream<Field<SqliteSequence>> primaryKeyFields() {
        return Stream.empty();
    }
}