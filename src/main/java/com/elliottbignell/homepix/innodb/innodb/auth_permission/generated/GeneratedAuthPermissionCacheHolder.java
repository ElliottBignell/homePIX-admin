package com.elliottbignell.homepix.innodb.innodb.auth_permission.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermission;
import com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermissionEntityStoreSerializerImpl;
import com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermissionManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfByte;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * AuthPermissionManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedAuthPermissionCacheHolder implements EntityStoreHolder<AuthPermission> {
    
    private final EntityStore<AuthPermission> entityStore;
    private final OfByte fieldIdCache;
    private final OfByte fieldContentTypeIdCache;
    private final OfString fieldCodenameCache;
    private final OfString fieldNameCache;
    
    public GeneratedAuthPermissionCacheHolder(
            EntityStore<AuthPermission> entityStore,
            OfByte fieldIdCache,
            OfByte fieldContentTypeIdCache,
            OfString fieldCodenameCache,
            OfString fieldNameCache) {
        
        this.entityStore             = requireNonNull(entityStore);
        this.fieldIdCache            = requireNonNull(fieldIdCache);
        this.fieldContentTypeIdCache = requireNonNull(fieldContentTypeIdCache);
        this.fieldCodenameCache      = requireNonNull(fieldCodenameCache);
        this.fieldNameCache          = requireNonNull(fieldNameCache);
    }
    
    @Override
    public EntityStore<AuthPermission> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<AuthPermission> columnId) {
        if (columnId instanceof AuthPermission.Identifier) {
            final AuthPermission.Identifier _id = (AuthPermission.Identifier) columnId;
            switch (_id) {
                case ID              : return (CACHE) fieldIdCache;
                case CONTENT_TYPE_ID : return (CACHE) fieldContentTypeIdCache;
                case CODENAME        : return (CACHE) fieldCodenameCache;
                case NAME            : return (CACHE) fieldNameCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"              : return (CACHE) fieldIdCache;
                case "content_type_id" : return (CACHE) fieldContentTypeIdCache;
                case "codename"        : return (CACHE) fieldCodenameCache;
                case "name"            : return (CACHE) fieldNameCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<AuthPermission> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedAuthPermissionCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            AuthPermissionEntityStoreSerializerImpl::new,
            TableIdentifier.of("innodb", "innodb", "auth_permission")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<AuthPermission> recycleAndPersist(PersistOperation<AuthPermission> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<AuthPermission> recycleAndRemove(RemoveOperation<AuthPermission> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<AuthPermission> recycleAndUpdate(UpdateOperation<AuthPermission> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<AuthPermission> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<AuthPermission>, FieldCache<?>>>of(
            Tuples.of(AuthPermission.ID,             fieldIdCache),
            Tuples.of(AuthPermission.CONTENT_TYPE_ID,fieldContentTypeIdCache),
            Tuples.of(AuthPermission.CODENAME,       fieldCodenameCache),
            Tuples.of(AuthPermission.NAME,           fieldNameCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<AuthPermission>> columnIdentifiers = Stream.<HasIdentifier<AuthPermission>>of(
            AuthPermission.ID,
            AuthPermission.CONTENT_TYPE_ID,
            AuthPermission.CODENAME,
            AuthPermission.NAME
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedAuthPermissionCacheHolder> reload(CompletableFuture<EntityStore<AuthPermission>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfByte> fieldIdCacheFuture =
            DataStoreHolderUtil.buildByteCache(entityStoreFuture, executor, AuthPermission.ID, 0);
        
        final CompletableFuture<FieldCache.OfByte> fieldContentTypeIdCacheFuture =
            DataStoreHolderUtil.buildByteCache(entityStoreFuture, executor, AuthPermission.CONTENT_TYPE_ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCodenameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, AuthPermission.CODENAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, AuthPermission.NAME, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedAuthPermissionCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldContentTypeIdCacheFuture.get(),
                    fieldCodenameCacheFuture.get(),
                    fieldNameCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldContentTypeIdCache.close();
        fieldCodenameCache.close();
        fieldNameCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                AuthPermission.Identifier.ID,
                AuthPermission.Identifier.CONTENT_TYPE_ID,
                AuthPermission.Identifier.CODENAME,
                AuthPermission.Identifier.NAME
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}