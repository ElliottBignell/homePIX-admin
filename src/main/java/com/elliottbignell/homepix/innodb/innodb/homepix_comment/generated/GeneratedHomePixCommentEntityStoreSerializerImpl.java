package com.elliottbignell.homepix.innodb.innodb.homepix_comment.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixComment;
import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixCommentImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.sql.Timestamp;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

/**
 * Serializes and deserializes instances of HomePixComment.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHomePixCommentEntityStoreSerializerImpl implements EntityStoreSerializer<HomePixComment> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int ENDPOS_ID = 0;
    private static final int ENDPOS_APPROVED_COMMENT = 1;
    private static final int ENDPOS_POST_ID = 2;
    private static final int ENDPOS_CREATE_DATE = 3;
    private static final int ENDPOS_AUTHOR = 4;
    private static final int ENDPOS_TEXT = 8;
    private static final int VARSIZE_BEGINS = 12;
    
    protected GeneratedHomePixCommentEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, HomePixComment> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            if (entity.getId().isPresent()) {
                buffer.put(VARSIZE_BEGINS + varSizePos, entity.getId().get());
                varSizePos += Byte.BYTES;
                buffer.put(ENDPOS_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_ID, (byte) (0x80 | varSizePos));
            }
            if (entity.getApprovedComment().isPresent()) {
                buffer.put(VARSIZE_BEGINS + varSizePos, entity.getApprovedComment().get());
                varSizePos += Byte.BYTES;
                buffer.put(ENDPOS_APPROVED_COMMENT, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_APPROVED_COMMENT, (byte) (0x80 | varSizePos));
            }
            if (entity.getPostId().isPresent()) {
                buffer.putShort(VARSIZE_BEGINS + varSizePos, entity.getPostId().get());
                varSizePos += Short.BYTES;
                buffer.put(ENDPOS_POST_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_POST_ID, (byte) (0x80 | varSizePos));
            }
            if (entity.getCreateDate().isPresent()) {
                buffer.putLong(VARSIZE_BEGINS + varSizePos, entity.getCreateDate().get().getTime());
                varSizePos += Long.BYTES;
                buffer.put(ENDPOS_CREATE_DATE, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_CREATE_DATE, (byte) (0x80 | varSizePos));
            }
            if (entity.getAuthor().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getAuthor().get().getBytes());
                buffer.putInt(ENDPOS_AUTHOR, varSizePos);
            } else {
                buffer.putInt(ENDPOS_AUTHOR, (0x80000000 | varSizePos));
            }
            if (entity.getText().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getText().get().getBytes());
                buffer.putInt(ENDPOS_TEXT, varSizePos);
            } else {
                buffer.putInt(ENDPOS_TEXT, (0x80000000 | varSizePos));
            }
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        return DO_NOTHING;
    }
    
    @Override
    public LongFunction<HomePixComment> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final HomePixComment entity = new HomePixCommentImpl();
            if (buffer.get(offset + ENDPOS_ID) >= 0) {
                entity.setId(buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ID) - Byte.BYTES));
            }
            if (buffer.getInt(offset + ENDPOS_AUTHOR) >= 0) {
                try {
                    entity.setAuthor(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AUTHOR - Byte.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AUTHOR)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_TEXT) >= 0) {
                try {
                    entity.setText(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_TEXT - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TEXT)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.get(offset + ENDPOS_CREATE_DATE) >= 0) {
                entity.setCreateDate(new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_CREATE_DATE) - Long.BYTES)));
            }
            if (buffer.get(offset + ENDPOS_APPROVED_COMMENT) >= 0) {
                entity.setApprovedComment(buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES));
            }
            if (buffer.get(offset + ENDPOS_POST_ID) >= 0) {
                entity.setPostId(buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_POST_ID) - Short.BYTES));
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : 
                case APPROVED_COMMENT : return byte.class;
                case POST_ID          : return short.class;
                case CREATE_DATE      : return Timestamp.class;
                case AUTHOR           : 
                case TEXT             : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : 
                case "approved_comment" : return byte.class;
                case "post_id"          : return short.class;
                case "create_date"      : return Timestamp.class;
                case "author"           : 
                case "text"             : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<HomePixComment> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<HomePixComment>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        throw new UnsupportedOperationException("HomePixComment has no foreign references.");
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        throw new UnsupportedOperationException("HomePixComment has no foreign references.");
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) < 0;
                case APPROVED_COMMENT : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_APPROVED_COMMENT) < 0;
                case POST_ID          : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_POST_ID) < 0;
                case CREATE_DATE      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATE_DATE) < 0;
                case AUTHOR           : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AUTHOR) < 0;
                case TEXT             : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) < 0;
                case "approved_comment" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_APPROVED_COMMENT) < 0;
                case "post_id"          : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_POST_ID) < 0;
                case "create_date"      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATE_DATE) < 0;
                case "author"           : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AUTHOR) < 0;
                case "text"             : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) >= 0;
                case APPROVED_COMMENT : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_APPROVED_COMMENT) >= 0;
                case POST_ID          : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_POST_ID) >= 0;
                case CREATE_DATE      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATE_DATE) >= 0;
                case AUTHOR           : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AUTHOR) >= 0;
                case TEXT             : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) >= 0;
                case "approved_comment" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_APPROVED_COMMENT) >= 0;
                case "post_id"          : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_POST_ID) >= 0;
                case "create_date"      : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_CREATE_DATE) >= 0;
                case "author"           : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AUTHOR) >= 0;
                case "text"             : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ID) - Byte.BYTES);
                };
                case APPROVED_COMMENT : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type byte.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ID) - Byte.BYTES);
                };
                case "approved_comment" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type byte.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        if ("post_id".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                return buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_POST_ID) - Short.BYTES);
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case CREATE_DATE : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_CREATE_DATE) - Long.BYTES));
                };
                case AUTHOR      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AUTHOR - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AUTHOR)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case TEXT        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_TEXT - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TEXT)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "create_date" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return new Timestamp(buffer.getLong(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_CREATE_DATE) - Long.BYTES));
                };
                case "author"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AUTHOR - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AUTHOR)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "text"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_TEXT - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TEXT)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ID) - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ID) - Byte.BYTES)
                    );
                };
                case APPROVED_COMMENT : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES)
                    );
                };
                case POST_ID          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_POST_ID) - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_POST_ID) - Short.BYTES)
                    );
                };
                case CREATE_DATE      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_CREATE_DATE) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_CREATE_DATE) - Long.BYTES)
                    );
                };
                case AUTHOR           : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_AUTHOR);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_AUTHOR);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case TEXT             : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_TEXT);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_TEXT);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ID) - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ID) - Byte.BYTES)
                    );
                };
                case "approved_comment" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_APPROVED_COMMENT) - Byte.BYTES)
                    );
                };
                case "post_id"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_POST_ID) - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_POST_ID) - Short.BYTES)
                    );
                };
                case "create_date"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_CREATE_DATE) - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_CREATE_DATE) - Long.BYTES)
                    );
                };
                case "author"           : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_AUTHOR);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_AUTHOR);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "text"             : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_TEXT);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_TEXT);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aEndPos - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bEndPos - Byte.BYTES)
                    );
                };
                case APPROVED_COMMENT : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_APPROVED_COMMENT);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_APPROVED_COMMENT);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aEndPos - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bEndPos - Byte.BYTES)
                    );
                };
                case POST_ID          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_POST_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_POST_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aEndPos - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bEndPos - Short.BYTES)
                    );
                };
                case CREATE_DATE      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_CREATE_DATE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_CREATE_DATE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case AUTHOR           : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_AUTHOR);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_AUTHOR);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case TEXT             : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_TEXT);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_TEXT);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aEndPos - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bEndPos - Byte.BYTES)
                    );
                };
                case "approved_comment" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_APPROVED_COMMENT);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_APPROVED_COMMENT);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aEndPos - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bEndPos - Byte.BYTES)
                    );
                };
                case "post_id"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_POST_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_POST_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aEndPos - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bEndPos - Short.BYTES)
                    );
                };
                case "create_date"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_CREATE_DATE);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_CREATE_DATE);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Long.compare(
                        aBuf.getLong(aOffset + VARSIZE_BEGINS + aEndPos - Long.BYTES),
                        bBuf.getLong(bOffset + VARSIZE_BEGINS + bEndPos - Long.BYTES)
                    );
                };
                case "author"           : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7f & aBuf.get(aOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7f & bBuf.get(bOffset + ENDPOS_AUTHOR - Byte.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_AUTHOR);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_AUTHOR);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "text"             : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_TEXT - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_TEXT);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_TEXT);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<HomePixComment> colId, final byte value) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : {
                    final byte operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_ID);
                        if (endPos < 0) return 1;
                        else return Byte.compare(
                            buffer.get(offset + VARSIZE_BEGINS + endPos - Byte.BYTES),
                            operand
                        );
                    };
                }
                case APPROVED_COMMENT : {
                    final byte operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_APPROVED_COMMENT);
                        if (endPos < 0) return 1;
                        else return Byte.compare(
                            buffer.get(offset + VARSIZE_BEGINS + endPos - Byte.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type byte.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : {
                    final byte operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_ID);
                        if (endPos < 0) return 1;
                        else return Byte.compare(
                            buffer.get(offset + VARSIZE_BEGINS + endPos - Byte.BYTES),
                            operand
                        );
                    };
                }
                case "approved_comment" : {
                    final byte operand = value;
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_APPROVED_COMMENT);
                        if (endPos < 0) return 1;
                        else return Byte.compare(
                            buffer.get(offset + VARSIZE_BEGINS + endPos - Byte.BYTES),
                            operand
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type byte.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<HomePixComment> colId, final short value) {
        if ("post_id".equals(colId.getColumnId())) {
            {
                final short operand = value;
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int endPos = buffer.get(offset + ENDPOS_POST_ID);
                    if (endPos < 0) return 1;
                    else return Short.compare(
                        buffer.getShort(offset + VARSIZE_BEGINS + endPos - Short.BYTES),
                        operand
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<HomePixComment> colId, final int value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<HomePixComment> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<HomePixComment> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<HomePixComment> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<HomePixComment> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<HomePixComment> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<HomePixComment> colId, final Object value) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case CREATE_DATE : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_CREATE_DATE);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case AUTHOR      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AUTHOR - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AUTHOR),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case TEXT        : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_TEXT - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TEXT),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "create_date" : {
                    final long operand = ((Timestamp) value).getTime();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        final int endPos = buffer.get(offset + ENDPOS_CREATE_DATE);
                        if (endPos < 0) return 1;
                        else return Long.compare(
                            buffer.getLong(offset + VARSIZE_BEGINS + endPos - Long.BYTES),
                            operand
                        );
                    };
                }
                case "author"      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7f & buffer.get(offset + ENDPOS_AUTHOR - Byte.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_AUTHOR),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "text"        : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_TEXT - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_TEXT),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<HomePixComment> colId) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ID) < 0 ? 0 : -1;
                };
                case APPROVED_COMMENT : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_APPROVED_COMMENT) < 0 ? 0 : -1;
                };
                case POST_ID          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_POST_ID) < 0 ? 0 : -1;
                };
                case CREATE_DATE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_CREATE_DATE) < 0 ? 0 : -1;
                };
                case AUTHOR           : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AUTHOR) < 0 ? 0 : -1;
                case TEXT             : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ID) < 0 ? 0 : -1;
                };
                case "approved_comment" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_APPROVED_COMMENT) < 0 ? 0 : -1;
                };
                case "post_id"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_POST_ID) < 0 ? 0 : -1;
                };
                case "create_date"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_CREATE_DATE) < 0 ? 0 : -1;
                };
                case "author"           : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_AUTHOR) < 0 ? 0 : -1;
                case "text"             : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<HomePixComment> colId, final EntityStorePredicate predicate) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case APPROVED_COMMENT : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT)
                    );
                };
                case POST_ID          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_POST_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_POST_ID)
                    );
                };
                case CREATE_DATE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATE_DATE)
                    );
                };
                case AUTHOR           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AUTHOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AUTHOR)
                    );
                };
                case TEXT             : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_TEXT - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TEXT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case "approved_comment" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT)
                    );
                };
                case "post_id"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_POST_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_POST_ID)
                    );
                };
                case "create_date"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATE_DATE)
                    );
                };
                case "author"           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AUTHOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AUTHOR)
                    );
                };
                case "text"             : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_TEXT - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TEXT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<HomePixComment> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case APPROVED_COMMENT : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT)
                    );
                };
                case POST_ID          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_POST_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_POST_ID)
                    );
                };
                case CREATE_DATE      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATE_DATE)
                    );
                };
                case AUTHOR           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AUTHOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AUTHOR)
                    );
                };
                case TEXT             : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_TEXT - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TEXT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case "approved_comment" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_APPROVED_COMMENT)
                    );
                };
                case "post_id"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_POST_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_POST_ID)
                    );
                };
                case "create_date"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_CREATE_DATE)
                    );
                };
                case "author"           : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_AUTHOR - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_AUTHOR)
                    );
                };
                case "text"             : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_TEXT - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_TEXT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<HomePixComment> colId, final EntityStoreComparator comparator) {
        if (colId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) colId;
            switch (_id) {
                case ID               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ID)
                    );
                };
                case APPROVED_COMMENT : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_APPROVED_COMMENT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_APPROVED_COMMENT)
                    );
                };
                case POST_ID          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_POST_ID - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_POST_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_POST_ID - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_POST_ID)
                    );
                };
                case CREATE_DATE      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_CREATE_DATE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_CREATE_DATE)
                    );
                };
                case AUTHOR           : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_AUTHOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_AUTHOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_AUTHOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_AUTHOR)
                    );
                };
                case TEXT             : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_TEXT - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_TEXT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_TEXT - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_TEXT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "id"               : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ID)
                    );
                };
                case "approved_comment" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_APPROVED_COMMENT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_APPROVED_COMMENT - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_APPROVED_COMMENT)
                    );
                };
                case "post_id"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_POST_ID - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_POST_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_POST_ID - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_POST_ID)
                    );
                };
                case "create_date"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_CREATE_DATE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_CREATE_DATE - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_CREATE_DATE)
                    );
                };
                case "author"           : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_AUTHOR - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_AUTHOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_AUTHOR - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_AUTHOR)
                    );
                };
                case "text"             : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_TEXT - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_TEXT), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_TEXT - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_TEXT)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_TEXT));
    }
}