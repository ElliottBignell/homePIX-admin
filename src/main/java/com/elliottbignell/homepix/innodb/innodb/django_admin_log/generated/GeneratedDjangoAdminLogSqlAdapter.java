package com.elliottbignell.homepix.innodb.innodb.django_admin_log.generated;

import com.elliottbignell.homepix.innodb.innodb.django_admin_log.DjangoAdminLog;
import com.elliottbignell.homepix.innodb.innodb.django_admin_log.DjangoAdminLogImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.elliottbignell.homepix.innodb.innodb.django_admin_log.DjangoAdminLog}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDjangoAdminLogSqlAdapter implements SqlAdapter<DjangoAdminLog> {
    
    private final TableIdentifier<DjangoAdminLog> tableIdentifier;
    
    protected GeneratedDjangoAdminLogSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("innodb", "innodb", "django_admin_log");
    }
    
    protected DjangoAdminLog apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(            resultSet.getString(1 + offset))
            .setActionTime(    resultSet.getTimestamp(2 + offset))
            .setObjectId(      resultSet.getString(3 + offset))
            .setObjectRepr(    resultSet.getString(4 + offset))
            .setChangeMessage( resultSet.getString(5 + offset))
            .setContentTypeId( resultSet.getString(6 + offset))
            .setUserId(        resultSet.getString(7 + offset))
            .setActionFlag(    resultSet.getString(8 + offset))
            ;
    }
    
    protected DjangoAdminLogImpl createEntity() {
        return new DjangoAdminLogImpl();
    }
    
    @Override
    public TableIdentifier<DjangoAdminLog> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, DjangoAdminLog> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, DjangoAdminLog> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}