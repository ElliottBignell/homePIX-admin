package com.elliottbignell.homepix.innodb.innodb.captcha_captchastore.generated;

import com.elliottbignell.homepix.innodb.innodb.captcha_captchastore.CaptchaCaptchastore;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.captcha_captchastore.CaptchaCaptchastore}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCaptchaCaptchastoreImpl implements CaptchaCaptchastore {
    
    private String id;
    private String challenge;
    private String response;
    private String hashkey;
    private String expiration;
    
    protected GeneratedCaptchaCaptchastoreImpl() {}
    
    @Override
    public Optional<String> getId() {
        return Optional.ofNullable(id);
    }
    
    @Override
    public Optional<String> getChallenge() {
        return Optional.ofNullable(challenge);
    }
    
    @Override
    public Optional<String> getResponse() {
        return Optional.ofNullable(response);
    }
    
    @Override
    public Optional<String> getHashkey() {
        return Optional.ofNullable(hashkey);
    }
    
    @Override
    public Optional<String> getExpiration() {
        return Optional.ofNullable(expiration);
    }
    
    @Override
    public CaptchaCaptchastore setId(String id) {
        this.id = id;
        return this;
    }
    
    @Override
    public CaptchaCaptchastore setChallenge(String challenge) {
        this.challenge = challenge;
        return this;
    }
    
    @Override
    public CaptchaCaptchastore setResponse(String response) {
        this.response = response;
        return this;
    }
    
    @Override
    public CaptchaCaptchastore setHashkey(String hashkey) {
        this.hashkey = hashkey;
        return this;
    }
    
    @Override
    public CaptchaCaptchastore setExpiration(String expiration) {
        this.expiration = expiration;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(OptionalUtil.unwrap(getId())));
        sj.add("challenge = "  + Objects.toString(OptionalUtil.unwrap(getChallenge())));
        sj.add("response = "   + Objects.toString(OptionalUtil.unwrap(getResponse())));
        sj.add("hashkey = "    + Objects.toString(OptionalUtil.unwrap(getHashkey())));
        sj.add("expiration = " + Objects.toString(OptionalUtil.unwrap(getExpiration())));
        return "CaptchaCaptchastoreImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof CaptchaCaptchastore)) { return false; }
        final CaptchaCaptchastore thatCaptchaCaptchastore = (CaptchaCaptchastore)that;
        if (!Objects.equals(this.getId(), thatCaptchaCaptchastore.getId())) { return false; }
        if (!Objects.equals(this.getChallenge(), thatCaptchaCaptchastore.getChallenge())) { return false; }
        if (!Objects.equals(this.getResponse(), thatCaptchaCaptchastore.getResponse())) { return false; }
        if (!Objects.equals(this.getHashkey(), thatCaptchaCaptchastore.getHashkey())) { return false; }
        if (!Objects.equals(this.getExpiration(), thatCaptchaCaptchastore.getExpiration())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getChallenge()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getResponse()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHashkey()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getExpiration()));
        return hash;
    }
}