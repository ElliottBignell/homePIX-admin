package com.elliottbignell.homepix.innodb.innodb.homepix_albumcontent.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_albumcontent.HomePixAlbumcontent;
import com.elliottbignell.homepix.innodb.innodb.homepix_albumcontent.HomePixAlbumcontentImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

/**
 * Serializes and deserializes instances of HomePixAlbumcontent.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHomePixAlbumcontentEntityStoreSerializerImpl implements EntityStoreSerializer<HomePixAlbumcontent> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int ENDPOS_ALBUM_ID = 0;
    private static final int ENDPOS_ID = 1;
    private static final int ENDPOS_ENTRY_ID = 2;
    private static final int VARSIZE_BEGINS = 3;
    
    protected GeneratedHomePixAlbumcontentEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, HomePixAlbumcontent> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            if (entity.getAlbumId().isPresent()) {
                buffer.put(VARSIZE_BEGINS + varSizePos, entity.getAlbumId().get());
                varSizePos += Byte.BYTES;
                buffer.put(ENDPOS_ALBUM_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_ALBUM_ID, (byte) (0x80 | varSizePos));
            }
            if (entity.getId().isPresent()) {
                buffer.putShort(VARSIZE_BEGINS + varSizePos, entity.getId().get());
                varSizePos += Short.BYTES;
                buffer.put(ENDPOS_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_ID, (byte) (0x80 | varSizePos));
            }
            if (entity.getEntryId().isPresent()) {
                buffer.putInt(VARSIZE_BEGINS + varSizePos, entity.getEntryId().getAsInt());
                varSizePos += Integer.BYTES;
                buffer.put(ENDPOS_ENTRY_ID, (byte) varSizePos);
            } else {
                buffer.put(ENDPOS_ENTRY_ID, (byte) (0x80 | varSizePos));
            }
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        return DO_NOTHING;
    }
    
    @Override
    public LongFunction<HomePixAlbumcontent> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final HomePixAlbumcontent entity = new HomePixAlbumcontentImpl();
            if (buffer.get(offset + ENDPOS_ID) >= 0) {
                entity.setId(buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ID) - Short.BYTES));
            }
            if (buffer.get(offset + ENDPOS_ALBUM_ID) >= 0) {
                entity.setAlbumId(buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ALBUM_ID) - Byte.BYTES));
            }
            if (buffer.get(offset + ENDPOS_ENTRY_ID) >= 0) {
                entity.setEntryId(buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ENTRY_ID) - Integer.BYTES));
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return byte.class;
                case ID       : return short.class;
                case ENTRY_ID : return int.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return byte.class;
                case "id"       : return short.class;
                case "entry_id" : return int.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<HomePixAlbumcontent> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<HomePixAlbumcontent>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        throw new UnsupportedOperationException("HomePixAlbumcontent has no foreign references.");
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        throw new UnsupportedOperationException("HomePixAlbumcontent has no foreign references.");
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ALBUM_ID) < 0;
                case ID       : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) < 0;
                case ENTRY_ID : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ENTRY_ID) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ALBUM_ID) < 0;
                case "id"       : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) < 0;
                case "entry_id" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ENTRY_ID) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ALBUM_ID) >= 0;
                case ID       : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) >= 0;
                case ENTRY_ID : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ENTRY_ID) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ALBUM_ID) >= 0;
                case "id"       : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ID) >= 0;
                case "entry_id" : return ref -> bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ENTRY_ID) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if ("album_id".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                return buffer.get(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ALBUM_ID) - Byte.BYTES);
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if ("id".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                return buffer.getShort(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ID) - Short.BYTES);
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if ("entry_id".equals(colId.getColumnId())) {
            return ref -> {
                final ByteBuffer buffer = bufferFinder.apply(ref);
                final int offset = offsetFinder.applyAsInt(ref);
                return buffer.getInt(offset + VARSIZE_BEGINS + buffer.get(offset + ENDPOS_ENTRY_ID) - Integer.BYTES);
            };
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ALBUM_ID) - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ALBUM_ID) - Byte.BYTES)
                    );
                };
                case ID       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ID) - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ID) - Short.BYTES)
                    );
                };
                case ENTRY_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ENTRY_ID) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ENTRY_ID) - Integer.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ALBUM_ID) - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ALBUM_ID) - Byte.BYTES)
                    );
                };
                case "id"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ID) - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ID) - Short.BYTES)
                    );
                };
                case "entry_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aBuf.get(aOffset + ENDPOS_ENTRY_ID) - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bBuf.get(bOffset + ENDPOS_ENTRY_ID) - Integer.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ALBUM_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ALBUM_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aEndPos - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bEndPos - Byte.BYTES)
                    );
                };
                case ID       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aEndPos - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bEndPos - Short.BYTES)
                    );
                };
                case ENTRY_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ENTRY_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ENTRY_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ALBUM_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ALBUM_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Byte.compare(
                        aBuf.get(aOffset + VARSIZE_BEGINS + aEndPos - Byte.BYTES),
                        bBuf.get(bOffset + VARSIZE_BEGINS + bEndPos - Byte.BYTES)
                    );
                };
                case "id"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Short.compare(
                        aBuf.getShort(aOffset + VARSIZE_BEGINS + aEndPos - Short.BYTES),
                        bBuf.getShort(bOffset + VARSIZE_BEGINS + bEndPos - Short.BYTES)
                    );
                };
                case "entry_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aEndPos = aBuf.get(aOffset + ENDPOS_ENTRY_ID);
                    final int bEndPos = bBuf.get(bOffset + ENDPOS_ENTRY_ID);
                    if (aEndPos < 0 && bEndPos < 0) return 0;
                    else if (aEndPos < 0) return 1;
                    else if (bEndPos < 0) return -1;
                    else return Integer.compare(
                        aBuf.getInt(aOffset + VARSIZE_BEGINS + aEndPos - Integer.BYTES),
                        bBuf.getInt(bOffset + VARSIZE_BEGINS + bEndPos - Integer.BYTES)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<HomePixAlbumcontent> colId, final byte value) {
        if ("album_id".equals(colId.getColumnId())) {
            {
                final byte operand = value;
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int endPos = buffer.get(offset + ENDPOS_ALBUM_ID);
                    if (endPos < 0) return 1;
                    else return Byte.compare(
                        buffer.get(offset + VARSIZE_BEGINS + endPos - Byte.BYTES),
                        operand
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<HomePixAlbumcontent> colId, final short value) {
        if ("id".equals(colId.getColumnId())) {
            {
                final short operand = value;
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int endPos = buffer.get(offset + ENDPOS_ID);
                    if (endPos < 0) return 1;
                    else return Short.compare(
                        buffer.getShort(offset + VARSIZE_BEGINS + endPos - Short.BYTES),
                        operand
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<HomePixAlbumcontent> colId, final int value) {
        if ("entry_id".equals(colId.getColumnId())) {
            {
                final int operand = value;
                return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    final int endPos = buffer.get(offset + ENDPOS_ENTRY_ID);
                    if (endPos < 0) return 1;
                    else return Integer.compare(
                        buffer.getInt(offset + VARSIZE_BEGINS + endPos - Integer.BYTES),
                        operand
                    );
                };
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<HomePixAlbumcontent> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<HomePixAlbumcontent> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<HomePixAlbumcontent> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<HomePixAlbumcontent> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<HomePixAlbumcontent> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<HomePixAlbumcontent> colId, final Object value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<HomePixAlbumcontent> colId) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ALBUM_ID) < 0 ? 0 : -1;
                };
                case ID       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ID) < 0 ? 0 : -1;
                };
                case ENTRY_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ENTRY_ID) < 0 ? 0 : -1;
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ALBUM_ID) < 0 ? 0 : -1;
                };
                case "id"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ID) < 0 ? 0 : -1;
                };
                case "entry_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    return buffer.get(offset + ENDPOS_ENTRY_ID) < 0 ? 0 : -1;
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<HomePixAlbumcontent> colId, final EntityStorePredicate predicate) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ALBUM_ID)
                    );
                };
                case ID       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case ENTRY_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ENTRY_ID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ALBUM_ID)
                    );
                };
                case "id"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case "entry_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ENTRY_ID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<HomePixAlbumcontent> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ALBUM_ID)
                    );
                };
                case ID       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case ENTRY_ID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ENTRY_ID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ALBUM_ID)
                    );
                };
                case "id"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ID)
                    );
                };
                case "entry_id" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7f & buffer.get(rowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.get(rowOffset + ENDPOS_ENTRY_ID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<HomePixAlbumcontent> colId, final EntityStoreComparator comparator) {
        if (colId instanceof HomePixAlbumcontent.Identifier) {
            final HomePixAlbumcontent.Identifier _id = (HomePixAlbumcontent.Identifier) colId;
            switch (_id) {
                case ALBUM_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ALBUM_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ALBUM_ID)
                    );
                };
                case ID       : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_ID - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_ID - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ID)
                    );
                };
                case ENTRY_ID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ENTRY_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ENTRY_ID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "album_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ALBUM_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ALBUM_ID)
                    );
                };
                case "id"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_ID - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_ID - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ID)
                    );
                };
                case "entry_id" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7f & aBuffer.get(aRowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.get(aRowOffset + ENDPOS_ENTRY_ID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7f & bBuffer.get(bRowOffset + ENDPOS_ENTRY_ID - Byte.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.get(bRowOffset + ENDPOS_ENTRY_ID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).get(offsetFinder.applyAsInt(ref) + ENDPOS_ENTRY_ID));
    }
}