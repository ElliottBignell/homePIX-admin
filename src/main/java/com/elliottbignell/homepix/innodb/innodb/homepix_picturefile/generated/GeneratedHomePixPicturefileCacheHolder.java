package com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.HomePixPicturefile;
import com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.HomePixPicturefileEntityStoreSerializerImpl;
import com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.HomePixPicturefileManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfByte;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfLong;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * HomePixPicturefileManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedHomePixPicturefileCacheHolder implements EntityStoreHolder<HomePixPicturefile> {
    
    private final EntityStore<HomePixPicturefile> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldFileCache;
    private final OfString fieldTitleCache;
    private final OfLong fieldSortkeyCache;
    private final OfComparable<Timestamp> fieldAddedOnCache;
    private final OfComparable<Timestamp> fieldTakenOnCache;
    private final OfComparable<Timestamp> fieldLastModifiedCache;
    private final OfString fieldLocationCache;
    private final OfString fieldPrimaryCategoryCache;
    private final OfString fieldSecondaryCategoryCache;
    private final OfInt fieldKeywordsIdCache;
    private final OfShort fieldPathIdCache;
    private final OfByte fieldHitsCache;
    
    public GeneratedHomePixPicturefileCacheHolder(
            EntityStore<HomePixPicturefile> entityStore,
            OfInt fieldIdCache,
            OfString fieldFileCache,
            OfString fieldTitleCache,
            OfLong fieldSortkeyCache,
            OfComparable<Timestamp> fieldAddedOnCache,
            OfComparable<Timestamp> fieldTakenOnCache,
            OfComparable<Timestamp> fieldLastModifiedCache,
            OfString fieldLocationCache,
            OfString fieldPrimaryCategoryCache,
            OfString fieldSecondaryCategoryCache,
            OfInt fieldKeywordsIdCache,
            OfShort fieldPathIdCache,
            OfByte fieldHitsCache) {
        
        this.entityStore                 = requireNonNull(entityStore);
        this.fieldIdCache                = requireNonNull(fieldIdCache);
        this.fieldFileCache              = requireNonNull(fieldFileCache);
        this.fieldTitleCache             = requireNonNull(fieldTitleCache);
        this.fieldSortkeyCache           = requireNonNull(fieldSortkeyCache);
        this.fieldAddedOnCache           = requireNonNull(fieldAddedOnCache);
        this.fieldTakenOnCache           = requireNonNull(fieldTakenOnCache);
        this.fieldLastModifiedCache      = requireNonNull(fieldLastModifiedCache);
        this.fieldLocationCache          = requireNonNull(fieldLocationCache);
        this.fieldPrimaryCategoryCache   = requireNonNull(fieldPrimaryCategoryCache);
        this.fieldSecondaryCategoryCache = requireNonNull(fieldSecondaryCategoryCache);
        this.fieldKeywordsIdCache        = requireNonNull(fieldKeywordsIdCache);
        this.fieldPathIdCache            = requireNonNull(fieldPathIdCache);
        this.fieldHitsCache              = requireNonNull(fieldHitsCache);
    }
    
    @Override
    public EntityStore<HomePixPicturefile> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<HomePixPicturefile> columnId) {
        if (columnId instanceof HomePixPicturefile.Identifier) {
            final HomePixPicturefile.Identifier _id = (HomePixPicturefile.Identifier) columnId;
            switch (_id) {
                case ID                 : return (CACHE) fieldIdCache;
                case FILE               : return (CACHE) fieldFileCache;
                case TITLE              : return (CACHE) fieldTitleCache;
                case SORTKEY            : return (CACHE) fieldSortkeyCache;
                case ADDED_ON           : return (CACHE) fieldAddedOnCache;
                case TAKEN_ON           : return (CACHE) fieldTakenOnCache;
                case LAST_MODIFIED      : return (CACHE) fieldLastModifiedCache;
                case LOCATION           : return (CACHE) fieldLocationCache;
                case PRIMARY_CATEGORY   : return (CACHE) fieldPrimaryCategoryCache;
                case SECONDARY_CATEGORY : return (CACHE) fieldSecondaryCategoryCache;
                case KEYWORDS_ID        : return (CACHE) fieldKeywordsIdCache;
                case PATH_ID            : return (CACHE) fieldPathIdCache;
                case HITS               : return (CACHE) fieldHitsCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"                : return (CACHE) fieldIdCache;
                case "file"              : return (CACHE) fieldFileCache;
                case "title"             : return (CACHE) fieldTitleCache;
                case "sortkey"           : return (CACHE) fieldSortkeyCache;
                case "added_on"          : return (CACHE) fieldAddedOnCache;
                case "taken_on"          : return (CACHE) fieldTakenOnCache;
                case "last_modified"     : return (CACHE) fieldLastModifiedCache;
                case "location"          : return (CACHE) fieldLocationCache;
                case "primaryCategory"   : return (CACHE) fieldPrimaryCategoryCache;
                case "secondaryCategory" : return (CACHE) fieldSecondaryCategoryCache;
                case "keywords_id"       : return (CACHE) fieldKeywordsIdCache;
                case "path_id"           : return (CACHE) fieldPathIdCache;
                case "hits"              : return (CACHE) fieldHitsCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<HomePixPicturefile> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedHomePixPicturefileCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            HomePixPicturefileEntityStoreSerializerImpl::new,
            TableIdentifier.of("innodb", "innodb", "homePIX_picturefile")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<HomePixPicturefile> recycleAndPersist(PersistOperation<HomePixPicturefile> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<HomePixPicturefile> recycleAndRemove(RemoveOperation<HomePixPicturefile> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<HomePixPicturefile> recycleAndUpdate(UpdateOperation<HomePixPicturefile> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<HomePixPicturefile> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<HomePixPicturefile>, FieldCache<?>>>of(
            Tuples.of(HomePixPicturefile.ID,                fieldIdCache),
            Tuples.of(HomePixPicturefile.FILE,              fieldFileCache),
            Tuples.of(HomePixPicturefile.TITLE,             fieldTitleCache),
            Tuples.of(HomePixPicturefile.SORTKEY,           fieldSortkeyCache),
            Tuples.of(HomePixPicturefile.ADDED_ON,          fieldAddedOnCache),
            Tuples.of(HomePixPicturefile.TAKEN_ON,          fieldTakenOnCache),
            Tuples.of(HomePixPicturefile.LAST_MODIFIED,     fieldLastModifiedCache),
            Tuples.of(HomePixPicturefile.LOCATION,          fieldLocationCache),
            Tuples.of(HomePixPicturefile.PRIMARY_CATEGORY,  fieldPrimaryCategoryCache),
            Tuples.of(HomePixPicturefile.SECONDARY_CATEGORY,fieldSecondaryCategoryCache),
            Tuples.of(HomePixPicturefile.KEYWORDS_ID,       fieldKeywordsIdCache),
            Tuples.of(HomePixPicturefile.PATH_ID,           fieldPathIdCache),
            Tuples.of(HomePixPicturefile.HITS,              fieldHitsCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<HomePixPicturefile>> columnIdentifiers = Stream.<HasIdentifier<HomePixPicturefile>>of(
            HomePixPicturefile.ID,
            HomePixPicturefile.FILE,
            HomePixPicturefile.TITLE,
            HomePixPicturefile.SORTKEY,
            HomePixPicturefile.ADDED_ON,
            HomePixPicturefile.TAKEN_ON,
            HomePixPicturefile.LAST_MODIFIED,
            HomePixPicturefile.LOCATION,
            HomePixPicturefile.PRIMARY_CATEGORY,
            HomePixPicturefile.SECONDARY_CATEGORY,
            HomePixPicturefile.KEYWORDS_ID,
            HomePixPicturefile.PATH_ID,
            HomePixPicturefile.HITS
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedHomePixPicturefileCacheHolder> reload(CompletableFuture<EntityStore<HomePixPicturefile>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, HomePixPicturefile.ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldFileCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixPicturefile.FILE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldTitleCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixPicturefile.TITLE, 0);
        
        final CompletableFuture<FieldCache.OfLong> fieldSortkeyCacheFuture =
            DataStoreHolderUtil.buildLongCache(entityStoreFuture, executor, HomePixPicturefile.SORTKEY, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldAddedOnCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, HomePixPicturefile.ADDED_ON, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldTakenOnCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, HomePixPicturefile.TAKEN_ON, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldLastModifiedCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, HomePixPicturefile.LAST_MODIFIED, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldLocationCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixPicturefile.LOCATION, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldPrimaryCategoryCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixPicturefile.PRIMARY_CATEGORY, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldSecondaryCategoryCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixPicturefile.SECONDARY_CATEGORY, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldKeywordsIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, HomePixPicturefile.KEYWORDS_ID, 0);
        
        final CompletableFuture<FieldCache.OfShort> fieldPathIdCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, HomePixPicturefile.PATH_ID, 0);
        
        final CompletableFuture<FieldCache.OfByte> fieldHitsCacheFuture =
            DataStoreHolderUtil.buildByteCache(entityStoreFuture, executor, HomePixPicturefile.HITS, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedHomePixPicturefileCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldFileCacheFuture.get(),
                    fieldTitleCacheFuture.get(),
                    fieldSortkeyCacheFuture.get(),
                    fieldAddedOnCacheFuture.get(),
                    fieldTakenOnCacheFuture.get(),
                    fieldLastModifiedCacheFuture.get(),
                    fieldLocationCacheFuture.get(),
                    fieldPrimaryCategoryCacheFuture.get(),
                    fieldSecondaryCategoryCacheFuture.get(),
                    fieldKeywordsIdCacheFuture.get(),
                    fieldPathIdCacheFuture.get(),
                    fieldHitsCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldFileCache.close();
        fieldTitleCache.close();
        fieldSortkeyCache.close();
        fieldAddedOnCache.close();
        fieldTakenOnCache.close();
        fieldLastModifiedCache.close();
        fieldLocationCache.close();
        fieldPrimaryCategoryCache.close();
        fieldSecondaryCategoryCache.close();
        fieldKeywordsIdCache.close();
        fieldPathIdCache.close();
        fieldHitsCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                HomePixPicturefile.Identifier.ID,
                HomePixPicturefile.Identifier.FILE,
                HomePixPicturefile.Identifier.TITLE,
                HomePixPicturefile.Identifier.SORTKEY,
                HomePixPicturefile.Identifier.ADDED_ON,
                HomePixPicturefile.Identifier.TAKEN_ON,
                HomePixPicturefile.Identifier.LAST_MODIFIED,
                HomePixPicturefile.Identifier.LOCATION,
                HomePixPicturefile.Identifier.PRIMARY_CATEGORY,
                HomePixPicturefile.Identifier.SECONDARY_CATEGORY,
                HomePixPicturefile.Identifier.KEYWORDS_ID,
                HomePixPicturefile.Identifier.PATH_ID,
                HomePixPicturefile.Identifier.HITS
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}