package com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.AuthUserUserPermissions;
import com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.AuthUserUserPermissionsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_user_user_permissions.AuthUserUserPermissions}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAuthUserUserPermissionsSqlAdapter implements SqlAdapter<AuthUserUserPermissions> {
    
    private final TableIdentifier<AuthUserUserPermissions> tableIdentifier;
    
    protected GeneratedAuthUserUserPermissionsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("innodb", "innodb", "auth_user_user_permissions");
    }
    
    protected AuthUserUserPermissions apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(           resultSet.getString(1 + offset))
            .setUserId(       resultSet.getString(2 + offset))
            .setPermissionId( resultSet.getString(3 + offset))
            ;
    }
    
    protected AuthUserUserPermissionsImpl createEntity() {
        return new AuthUserUserPermissionsImpl();
    }
    
    @Override
    public TableIdentifier<AuthUserUserPermissions> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, AuthUserUserPermissions> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, AuthUserUserPermissions> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}