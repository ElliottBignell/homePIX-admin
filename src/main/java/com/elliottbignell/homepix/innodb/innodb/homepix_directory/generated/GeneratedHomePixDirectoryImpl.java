package com.elliottbignell.homepix.innodb.innodb.homepix_directory.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_directory.HomePixDirectory;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.homepix_directory.HomePixDirectory}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHomePixDirectoryImpl implements HomePixDirectory {
    
    private Short id;
    private String path;
    private Byte count;
    private String remoteKey;
    private Integer remoteId;
    private String thumbnailId;
    private Byte hits;
    
    protected GeneratedHomePixDirectoryImpl() {}
    
    @Override
    public Optional<Short> getId() {
        return Optional.ofNullable(id);
    }
    
    @Override
    public Optional<String> getPath() {
        return Optional.ofNullable(path);
    }
    
    @Override
    public Optional<Byte> getCount() {
        return Optional.ofNullable(count);
    }
    
    @Override
    public Optional<String> getRemoteKey() {
        return Optional.ofNullable(remoteKey);
    }
    
    @Override
    public OptionalInt getRemoteId() {
        return OptionalUtil.ofNullable(remoteId);
    }
    
    @Override
    public Optional<String> getThumbnailId() {
        return Optional.ofNullable(thumbnailId);
    }
    
    @Override
    public Optional<Byte> getHits() {
        return Optional.ofNullable(hits);
    }
    
    @Override
    public HomePixDirectory setId(Short id) {
        this.id = id;
        return this;
    }
    
    @Override
    public HomePixDirectory setPath(String path) {
        this.path = path;
        return this;
    }
    
    @Override
    public HomePixDirectory setCount(Byte count) {
        this.count = count;
        return this;
    }
    
    @Override
    public HomePixDirectory setRemoteKey(String remoteKey) {
        this.remoteKey = remoteKey;
        return this;
    }
    
    @Override
    public HomePixDirectory setRemoteId(Integer remoteId) {
        this.remoteId = remoteId;
        return this;
    }
    
    @Override
    public HomePixDirectory setThumbnailId(String thumbnailId) {
        this.thumbnailId = thumbnailId;
        return this;
    }
    
    @Override
    public HomePixDirectory setHits(Byte hits) {
        this.hits = hits;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(OptionalUtil.unwrap(getId())));
        sj.add("path = "        + Objects.toString(OptionalUtil.unwrap(getPath())));
        sj.add("count = "       + Objects.toString(OptionalUtil.unwrap(getCount())));
        sj.add("remoteKey = "   + Objects.toString(OptionalUtil.unwrap(getRemoteKey())));
        sj.add("remoteId = "    + Objects.toString(OptionalUtil.unwrap(getRemoteId())));
        sj.add("thumbnailId = " + Objects.toString(OptionalUtil.unwrap(getThumbnailId())));
        sj.add("hits = "        + Objects.toString(OptionalUtil.unwrap(getHits())));
        return "HomePixDirectoryImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof HomePixDirectory)) { return false; }
        final HomePixDirectory thatHomePixDirectory = (HomePixDirectory)that;
        if (!Objects.equals(this.getId(), thatHomePixDirectory.getId())) { return false; }
        if (!Objects.equals(this.getPath(), thatHomePixDirectory.getPath())) { return false; }
        if (!Objects.equals(this.getCount(), thatHomePixDirectory.getCount())) { return false; }
        if (!Objects.equals(this.getRemoteKey(), thatHomePixDirectory.getRemoteKey())) { return false; }
        if (!Objects.equals(this.getRemoteId(), thatHomePixDirectory.getRemoteId())) { return false; }
        if (!Objects.equals(this.getThumbnailId(), thatHomePixDirectory.getThumbnailId())) { return false; }
        if (!Objects.equals(this.getHits(), thatHomePixDirectory.getHits())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPath()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCount()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getRemoteKey()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getRemoteId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getThumbnailId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHits()));
        return hash;
    }
}