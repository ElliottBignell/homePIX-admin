package com.elliottbignell.homepix.innodb.innodb.auth_permission.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermission;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.auth_permission.AuthPermission}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAuthPermissionImpl implements AuthPermission {
    
    private Byte id;
    private Byte contentTypeId;
    private String codename;
    private String name;
    
    protected GeneratedAuthPermissionImpl() {}
    
    @Override
    public Optional<Byte> getId() {
        return Optional.ofNullable(id);
    }
    
    @Override
    public Optional<Byte> getContentTypeId() {
        return Optional.ofNullable(contentTypeId);
    }
    
    @Override
    public Optional<String> getCodename() {
        return Optional.ofNullable(codename);
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public AuthPermission setId(Byte id) {
        this.id = id;
        return this;
    }
    
    @Override
    public AuthPermission setContentTypeId(Byte contentTypeId) {
        this.contentTypeId = contentTypeId;
        return this;
    }
    
    @Override
    public AuthPermission setCodename(String codename) {
        this.codename = codename;
        return this;
    }
    
    @Override
    public AuthPermission setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "            + Objects.toString(OptionalUtil.unwrap(getId())));
        sj.add("contentTypeId = " + Objects.toString(OptionalUtil.unwrap(getContentTypeId())));
        sj.add("codename = "      + Objects.toString(OptionalUtil.unwrap(getCodename())));
        sj.add("name = "          + Objects.toString(OptionalUtil.unwrap(getName())));
        return "AuthPermissionImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof AuthPermission)) { return false; }
        final AuthPermission thatAuthPermission = (AuthPermission)that;
        if (!Objects.equals(this.getId(), thatAuthPermission.getId())) { return false; }
        if (!Objects.equals(this.getContentTypeId(), thatAuthPermission.getContentTypeId())) { return false; }
        if (!Objects.equals(this.getCodename(), thatAuthPermission.getCodename())) { return false; }
        if (!Objects.equals(this.getName(), thatAuthPermission.getName())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getContentTypeId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCodename()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        return hash;
    }
}