package com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.HomePixPicturefile;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.elliottbignell.homepix.innodb.innodb.homepix_picturefile.HomePixPicturefile}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHomePixPicturefileImpl implements HomePixPicturefile {
    
    private Integer id;
    private String file;
    private String title;
    private Long sortkey;
    private Timestamp addedOn;
    private Timestamp takenOn;
    private Timestamp lastModified;
    private String location;
    private String primaryCategory;
    private String secondaryCategory;
    private Integer keywordsId;
    private Short pathId;
    private Byte hits;
    
    protected GeneratedHomePixPicturefileImpl() {}
    
    @Override
    public OptionalInt getId() {
        return OptionalUtil.ofNullable(id);
    }
    
    @Override
    public Optional<String> getFile() {
        return Optional.ofNullable(file);
    }
    
    @Override
    public Optional<String> getTitle() {
        return Optional.ofNullable(title);
    }
    
    @Override
    public OptionalLong getSortkey() {
        return OptionalUtil.ofNullable(sortkey);
    }
    
    @Override
    public Optional<Timestamp> getAddedOn() {
        return Optional.ofNullable(addedOn);
    }
    
    @Override
    public Optional<Timestamp> getTakenOn() {
        return Optional.ofNullable(takenOn);
    }
    
    @Override
    public Optional<Timestamp> getLastModified() {
        return Optional.ofNullable(lastModified);
    }
    
    @Override
    public Optional<String> getLocation() {
        return Optional.ofNullable(location);
    }
    
    @Override
    public Optional<String> getPrimaryCategory() {
        return Optional.ofNullable(primaryCategory);
    }
    
    @Override
    public Optional<String> getSecondaryCategory() {
        return Optional.ofNullable(secondaryCategory);
    }
    
    @Override
    public OptionalInt getKeywordsId() {
        return OptionalUtil.ofNullable(keywordsId);
    }
    
    @Override
    public Optional<Short> getPathId() {
        return Optional.ofNullable(pathId);
    }
    
    @Override
    public Optional<Byte> getHits() {
        return Optional.ofNullable(hits);
    }
    
    @Override
    public HomePixPicturefile setId(Integer id) {
        this.id = id;
        return this;
    }
    
    @Override
    public HomePixPicturefile setFile(String file) {
        this.file = file;
        return this;
    }
    
    @Override
    public HomePixPicturefile setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public HomePixPicturefile setSortkey(Long sortkey) {
        this.sortkey = sortkey;
        return this;
    }
    
    @Override
    public HomePixPicturefile setAddedOn(Timestamp addedOn) {
        this.addedOn = addedOn;
        return this;
    }
    
    @Override
    public HomePixPicturefile setTakenOn(Timestamp takenOn) {
        this.takenOn = takenOn;
        return this;
    }
    
    @Override
    public HomePixPicturefile setLastModified(Timestamp lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    @Override
    public HomePixPicturefile setLocation(String location) {
        this.location = location;
        return this;
    }
    
    @Override
    public HomePixPicturefile setPrimaryCategory(String primaryCategory) {
        this.primaryCategory = primaryCategory;
        return this;
    }
    
    @Override
    public HomePixPicturefile setSecondaryCategory(String secondaryCategory) {
        this.secondaryCategory = secondaryCategory;
        return this;
    }
    
    @Override
    public HomePixPicturefile setKeywordsId(Integer keywordsId) {
        this.keywordsId = keywordsId;
        return this;
    }
    
    @Override
    public HomePixPicturefile setPathId(Short pathId) {
        this.pathId = pathId;
        return this;
    }
    
    @Override
    public HomePixPicturefile setHits(Byte hits) {
        this.hits = hits;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "                + Objects.toString(OptionalUtil.unwrap(getId())));
        sj.add("file = "              + Objects.toString(OptionalUtil.unwrap(getFile())));
        sj.add("title = "             + Objects.toString(OptionalUtil.unwrap(getTitle())));
        sj.add("sortkey = "           + Objects.toString(OptionalUtil.unwrap(getSortkey())));
        sj.add("addedOn = "           + Objects.toString(OptionalUtil.unwrap(getAddedOn())));
        sj.add("takenOn = "           + Objects.toString(OptionalUtil.unwrap(getTakenOn())));
        sj.add("lastModified = "      + Objects.toString(OptionalUtil.unwrap(getLastModified())));
        sj.add("location = "          + Objects.toString(OptionalUtil.unwrap(getLocation())));
        sj.add("primaryCategory = "   + Objects.toString(OptionalUtil.unwrap(getPrimaryCategory())));
        sj.add("secondaryCategory = " + Objects.toString(OptionalUtil.unwrap(getSecondaryCategory())));
        sj.add("keywordsId = "        + Objects.toString(OptionalUtil.unwrap(getKeywordsId())));
        sj.add("pathId = "            + Objects.toString(OptionalUtil.unwrap(getPathId())));
        sj.add("hits = "              + Objects.toString(OptionalUtil.unwrap(getHits())));
        return "HomePixPicturefileImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof HomePixPicturefile)) { return false; }
        final HomePixPicturefile thatHomePixPicturefile = (HomePixPicturefile)that;
        if (!Objects.equals(this.getId(), thatHomePixPicturefile.getId())) { return false; }
        if (!Objects.equals(this.getFile(), thatHomePixPicturefile.getFile())) { return false; }
        if (!Objects.equals(this.getTitle(), thatHomePixPicturefile.getTitle())) { return false; }
        if (!Objects.equals(this.getSortkey(), thatHomePixPicturefile.getSortkey())) { return false; }
        if (!Objects.equals(this.getAddedOn(), thatHomePixPicturefile.getAddedOn())) { return false; }
        if (!Objects.equals(this.getTakenOn(), thatHomePixPicturefile.getTakenOn())) { return false; }
        if (!Objects.equals(this.getLastModified(), thatHomePixPicturefile.getLastModified())) { return false; }
        if (!Objects.equals(this.getLocation(), thatHomePixPicturefile.getLocation())) { return false; }
        if (!Objects.equals(this.getPrimaryCategory(), thatHomePixPicturefile.getPrimaryCategory())) { return false; }
        if (!Objects.equals(this.getSecondaryCategory(), thatHomePixPicturefile.getSecondaryCategory())) { return false; }
        if (!Objects.equals(this.getKeywordsId(), thatHomePixPicturefile.getKeywordsId())) { return false; }
        if (!Objects.equals(this.getPathId(), thatHomePixPicturefile.getPathId())) { return false; }
        if (!Objects.equals(this.getHits(), thatHomePixPicturefile.getHits())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFile()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTitle()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSortkey()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAddedOn()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTakenOn()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLastModified()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLocation()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPrimaryCategory()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSecondaryCategory()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getKeywordsId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPathId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHits()));
        return hash;
    }
}