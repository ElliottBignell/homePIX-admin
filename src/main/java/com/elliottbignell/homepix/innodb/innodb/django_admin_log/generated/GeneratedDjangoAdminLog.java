package com.elliottbignell.homepix.innodb.innodb.django_admin_log.generated;

import com.elliottbignell.homepix.innodb.innodb.django_admin_log.DjangoAdminLog;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.django_admin_log.DjangoAdminLog}-interface
 * representing entities of the {@code django_admin_log}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedDjangoAdminLog {
    
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getId()} method.
     */
    StringField<DjangoAdminLog, String> ID = DatastoreFields.createStringField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        DjangoAdminLog::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getActionTime()} method.
     */
    ComparableField<DjangoAdminLog, Timestamp, Timestamp> ACTION_TIME = DatastoreFields.createComparableField(
        Identifier.ACTION_TIME,
        o -> OptionalUtil.unwrap(o.getActionTime()),
        DjangoAdminLog::setActionTime,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getObjectId()} method.
     */
    StringField<DjangoAdminLog, String> OBJECT_ID = DatastoreFields.createStringField(
        Identifier.OBJECT_ID,
        o -> OptionalUtil.unwrap(o.getObjectId()),
        DjangoAdminLog::setObjectId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getObjectRepr()} method.
     */
    StringField<DjangoAdminLog, String> OBJECT_REPR = DatastoreFields.createStringField(
        Identifier.OBJECT_REPR,
        o -> OptionalUtil.unwrap(o.getObjectRepr()),
        DjangoAdminLog::setObjectRepr,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getChangeMessage()} method.
     */
    StringField<DjangoAdminLog, String> CHANGE_MESSAGE = DatastoreFields.createStringField(
        Identifier.CHANGE_MESSAGE,
        o -> OptionalUtil.unwrap(o.getChangeMessage()),
        DjangoAdminLog::setChangeMessage,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getContentTypeId()} method.
     */
    StringField<DjangoAdminLog, String> CONTENT_TYPE_ID = DatastoreFields.createStringField(
        Identifier.CONTENT_TYPE_ID,
        o -> OptionalUtil.unwrap(o.getContentTypeId()),
        DjangoAdminLog::setContentTypeId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getUserId()} method.
     */
    StringField<DjangoAdminLog, String> USER_ID = DatastoreFields.createStringField(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        DjangoAdminLog::setUserId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link DjangoAdminLog} field that can be
     * obtained using the {@link DjangoAdminLog#getActionFlag()} method.
     */
    StringField<DjangoAdminLog, String> ACTION_FLAG = DatastoreFields.createStringField(
        Identifier.ACTION_FLAG,
        o -> OptionalUtil.unwrap(o.getActionFlag()),
        DjangoAdminLog::setActionFlag,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this DjangoAdminLog. The id field corresponds to the
     * database column innodb.innodb.django_admin_log.id.
     * 
     * @return the id of this DjangoAdminLog
     */
    Optional<String> getId();
    
    /**
     * Returns the actionTime of this DjangoAdminLog. The actionTime field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.action_time.
     * 
     * @return the actionTime of this DjangoAdminLog
     */
    Optional<Timestamp> getActionTime();
    
    /**
     * Returns the objectId of this DjangoAdminLog. The objectId field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.object_id.
     * 
     * @return the objectId of this DjangoAdminLog
     */
    Optional<String> getObjectId();
    
    /**
     * Returns the objectRepr of this DjangoAdminLog. The objectRepr field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.object_repr.
     * 
     * @return the objectRepr of this DjangoAdminLog
     */
    Optional<String> getObjectRepr();
    
    /**
     * Returns the changeMessage of this DjangoAdminLog. The changeMessage field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.change_message.
     * 
     * @return the changeMessage of this DjangoAdminLog
     */
    Optional<String> getChangeMessage();
    
    /**
     * Returns the contentTypeId of this DjangoAdminLog. The contentTypeId field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.content_type_id.
     * 
     * @return the contentTypeId of this DjangoAdminLog
     */
    Optional<String> getContentTypeId();
    
    /**
     * Returns the userId of this DjangoAdminLog. The userId field corresponds
     * to the database column innodb.innodb.django_admin_log.user_id.
     * 
     * @return the userId of this DjangoAdminLog
     */
    Optional<String> getUserId();
    
    /**
     * Returns the actionFlag of this DjangoAdminLog. The actionFlag field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.action_flag.
     * 
     * @return the actionFlag of this DjangoAdminLog
     */
    Optional<String> getActionFlag();
    
    /**
     * Sets the id of this DjangoAdminLog. The id field corresponds to the
     * database column innodb.innodb.django_admin_log.id.
     * 
     * @param id to set of this DjangoAdminLog
     * @return   this DjangoAdminLog instance
     */
    DjangoAdminLog setId(String id);
    
    /**
     * Sets the actionTime of this DjangoAdminLog. The actionTime field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.action_time.
     * 
     * @param actionTime to set of this DjangoAdminLog
     * @return           this DjangoAdminLog instance
     */
    DjangoAdminLog setActionTime(Timestamp actionTime);
    
    /**
     * Sets the objectId of this DjangoAdminLog. The objectId field corresponds
     * to the database column innodb.innodb.django_admin_log.object_id.
     * 
     * @param objectId to set of this DjangoAdminLog
     * @return         this DjangoAdminLog instance
     */
    DjangoAdminLog setObjectId(String objectId);
    
    /**
     * Sets the objectRepr of this DjangoAdminLog. The objectRepr field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.object_repr.
     * 
     * @param objectRepr to set of this DjangoAdminLog
     * @return           this DjangoAdminLog instance
     */
    DjangoAdminLog setObjectRepr(String objectRepr);
    
    /**
     * Sets the changeMessage of this DjangoAdminLog. The changeMessage field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.change_message.
     * 
     * @param changeMessage to set of this DjangoAdminLog
     * @return              this DjangoAdminLog instance
     */
    DjangoAdminLog setChangeMessage(String changeMessage);
    
    /**
     * Sets the contentTypeId of this DjangoAdminLog. The contentTypeId field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.content_type_id.
     * 
     * @param contentTypeId to set of this DjangoAdminLog
     * @return              this DjangoAdminLog instance
     */
    DjangoAdminLog setContentTypeId(String contentTypeId);
    
    /**
     * Sets the userId of this DjangoAdminLog. The userId field corresponds to
     * the database column innodb.innodb.django_admin_log.user_id.
     * 
     * @param userId to set of this DjangoAdminLog
     * @return       this DjangoAdminLog instance
     */
    DjangoAdminLog setUserId(String userId);
    
    /**
     * Sets the actionFlag of this DjangoAdminLog. The actionFlag field
     * corresponds to the database column
     * innodb.innodb.django_admin_log.action_flag.
     * 
     * @param actionFlag to set of this DjangoAdminLog
     * @return           this DjangoAdminLog instance
     */
    DjangoAdminLog setActionFlag(String actionFlag);
    
    enum Identifier implements ColumnIdentifier<DjangoAdminLog> {
        
        ID              ("id"),
        ACTION_TIME     ("action_time"),
        OBJECT_ID       ("object_id"),
        OBJECT_REPR     ("object_repr"),
        CHANGE_MESSAGE  ("change_message"),
        CONTENT_TYPE_ID ("content_type_id"),
        USER_ID         ("user_id"),
        ACTION_FLAG     ("action_flag");
        
        private final String columnId;
        private final TableIdentifier<DjangoAdminLog> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "django_admin_log";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<DjangoAdminLog> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}