package com.elliottbignell.homepix.innodb.innodb.calendarview.generated;

import com.elliottbignell.homepix.innodb.innodb.calendarview.CalendarView;
import com.elliottbignell.homepix.innodb.innodb.calendarview.CalendarViewEntityStoreSerializerImpl;
import com.elliottbignell.homepix.innodb.innodb.calendarview.CalendarViewManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * CalendarViewManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedCalendarViewCacheHolder implements EntityStoreHolder<CalendarView> {
    
    private final EntityStore<CalendarView> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldFileCache;
    private final OfString fieldSubstrTakenOn011Cache;
    private final OfShort fieldCountCache;
    
    public GeneratedCalendarViewCacheHolder(
            EntityStore<CalendarView> entityStore,
            OfInt fieldIdCache,
            OfString fieldFileCache,
            OfString fieldSubstrTakenOn011Cache,
            OfShort fieldCountCache) {
        
        this.entityStore                = requireNonNull(entityStore);
        this.fieldIdCache               = requireNonNull(fieldIdCache);
        this.fieldFileCache             = requireNonNull(fieldFileCache);
        this.fieldSubstrTakenOn011Cache = requireNonNull(fieldSubstrTakenOn011Cache);
        this.fieldCountCache            = requireNonNull(fieldCountCache);
    }
    
    @Override
    public EntityStore<CalendarView> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<CalendarView> columnId) {
        if (columnId instanceof CalendarView.Identifier) {
            final CalendarView.Identifier _id = (CalendarView.Identifier) columnId;
            switch (_id) {
                case ID                 : return (CACHE) fieldIdCache;
                case FILE               : return (CACHE) fieldFileCache;
                case SUBSTR_TAKEN_ON011 : return (CACHE) fieldSubstrTakenOn011Cache;
                case COUNT              : return (CACHE) fieldCountCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"                       : return (CACHE) fieldIdCache;
                case "file"                     : return (CACHE) fieldFileCache;
                case "substr( taken_on, 0, 11)" : return (CACHE) fieldSubstrTakenOn011Cache;
                case "count"                    : return (CACHE) fieldCountCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<CalendarView> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedCalendarViewCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            CalendarViewEntityStoreSerializerImpl::new,
            TableIdentifier.of("innodb", "innodb", "CalendarView")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<CalendarView> recycleAndPersist(PersistOperation<CalendarView> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<CalendarView> recycleAndRemove(RemoveOperation<CalendarView> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<CalendarView> recycleAndUpdate(UpdateOperation<CalendarView> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<CalendarView> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<CalendarView>, FieldCache<?>>>of(
            Tuples.of(CalendarView.ID,                fieldIdCache),
            Tuples.of(CalendarView.FILE,              fieldFileCache),
            Tuples.of(CalendarView.SUBSTR_TAKEN_ON011,fieldSubstrTakenOn011Cache),
            Tuples.of(CalendarView.COUNT,             fieldCountCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<CalendarView>> columnIdentifiers = Stream.<HasIdentifier<CalendarView>>of(
            CalendarView.ID,
            CalendarView.FILE,
            CalendarView.SUBSTR_TAKEN_ON011,
            CalendarView.COUNT
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedCalendarViewCacheHolder> reload(CompletableFuture<EntityStore<CalendarView>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, CalendarView.ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldFileCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CalendarView.FILE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldSubstrTakenOn011CacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, CalendarView.SUBSTR_TAKEN_ON011, 0);
        
        final CompletableFuture<FieldCache.OfShort> fieldCountCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, CalendarView.COUNT, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedCalendarViewCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldFileCacheFuture.get(),
                    fieldSubstrTakenOn011CacheFuture.get(),
                    fieldCountCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldFileCache.close();
        fieldSubstrTakenOn011Cache.close();
        fieldCountCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                CalendarView.Identifier.ID,
                CalendarView.Identifier.FILE,
                CalendarView.Identifier.SUBSTR_TAKEN_ON011,
                CalendarView.Identifier.COUNT
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}