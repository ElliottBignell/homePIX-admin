package com.elliottbignell.homepix.innodb.innodb.homepix_comment.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixComment;
import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixCommentEntityStoreSerializerImpl;
import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixCommentManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfByte;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfShort;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * HomePixCommentManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedHomePixCommentCacheHolder implements EntityStoreHolder<HomePixComment> {
    
    private final EntityStore<HomePixComment> entityStore;
    private final OfByte fieldIdCache;
    private final OfString fieldAuthorCache;
    private final OfString fieldTextCache;
    private final OfComparable<Timestamp> fieldCreateDateCache;
    private final OfByte fieldApprovedCommentCache;
    private final OfShort fieldPostIdCache;
    
    public GeneratedHomePixCommentCacheHolder(
            EntityStore<HomePixComment> entityStore,
            OfByte fieldIdCache,
            OfString fieldAuthorCache,
            OfString fieldTextCache,
            OfComparable<Timestamp> fieldCreateDateCache,
            OfByte fieldApprovedCommentCache,
            OfShort fieldPostIdCache) {
        
        this.entityStore               = requireNonNull(entityStore);
        this.fieldIdCache              = requireNonNull(fieldIdCache);
        this.fieldAuthorCache          = requireNonNull(fieldAuthorCache);
        this.fieldTextCache            = requireNonNull(fieldTextCache);
        this.fieldCreateDateCache      = requireNonNull(fieldCreateDateCache);
        this.fieldApprovedCommentCache = requireNonNull(fieldApprovedCommentCache);
        this.fieldPostIdCache          = requireNonNull(fieldPostIdCache);
    }
    
    @Override
    public EntityStore<HomePixComment> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<HomePixComment> columnId) {
        if (columnId instanceof HomePixComment.Identifier) {
            final HomePixComment.Identifier _id = (HomePixComment.Identifier) columnId;
            switch (_id) {
                case ID               : return (CACHE) fieldIdCache;
                case AUTHOR           : return (CACHE) fieldAuthorCache;
                case TEXT             : return (CACHE) fieldTextCache;
                case CREATE_DATE      : return (CACHE) fieldCreateDateCache;
                case APPROVED_COMMENT : return (CACHE) fieldApprovedCommentCache;
                case POST_ID          : return (CACHE) fieldPostIdCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"               : return (CACHE) fieldIdCache;
                case "author"           : return (CACHE) fieldAuthorCache;
                case "text"             : return (CACHE) fieldTextCache;
                case "create_date"      : return (CACHE) fieldCreateDateCache;
                case "approved_comment" : return (CACHE) fieldApprovedCommentCache;
                case "post_id"          : return (CACHE) fieldPostIdCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<HomePixComment> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedHomePixCommentCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            HomePixCommentEntityStoreSerializerImpl::new,
            TableIdentifier.of("innodb", "innodb", "homePIX_comment")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<HomePixComment> recycleAndPersist(PersistOperation<HomePixComment> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<HomePixComment> recycleAndRemove(RemoveOperation<HomePixComment> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<HomePixComment> recycleAndUpdate(UpdateOperation<HomePixComment> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<HomePixComment> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<HomePixComment>, FieldCache<?>>>of(
            Tuples.of(HomePixComment.ID,              fieldIdCache),
            Tuples.of(HomePixComment.AUTHOR,          fieldAuthorCache),
            Tuples.of(HomePixComment.TEXT,            fieldTextCache),
            Tuples.of(HomePixComment.CREATE_DATE,     fieldCreateDateCache),
            Tuples.of(HomePixComment.APPROVED_COMMENT,fieldApprovedCommentCache),
            Tuples.of(HomePixComment.POST_ID,         fieldPostIdCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<HomePixComment>> columnIdentifiers = Stream.<HasIdentifier<HomePixComment>>of(
            HomePixComment.ID,
            HomePixComment.AUTHOR,
            HomePixComment.TEXT,
            HomePixComment.CREATE_DATE,
            HomePixComment.APPROVED_COMMENT,
            HomePixComment.POST_ID
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedHomePixCommentCacheHolder> reload(CompletableFuture<EntityStore<HomePixComment>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfByte> fieldIdCacheFuture =
            DataStoreHolderUtil.buildByteCache(entityStoreFuture, executor, HomePixComment.ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldAuthorCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixComment.AUTHOR, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldTextCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, HomePixComment.TEXT, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldCreateDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, HomePixComment.CREATE_DATE, 0);
        
        final CompletableFuture<FieldCache.OfByte> fieldApprovedCommentCacheFuture =
            DataStoreHolderUtil.buildByteCache(entityStoreFuture, executor, HomePixComment.APPROVED_COMMENT, 0);
        
        final CompletableFuture<FieldCache.OfShort> fieldPostIdCacheFuture =
            DataStoreHolderUtil.buildShortCache(entityStoreFuture, executor, HomePixComment.POST_ID, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedHomePixCommentCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldAuthorCacheFuture.get(),
                    fieldTextCacheFuture.get(),
                    fieldCreateDateCacheFuture.get(),
                    fieldApprovedCommentCacheFuture.get(),
                    fieldPostIdCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldAuthorCache.close();
        fieldTextCache.close();
        fieldCreateDateCache.close();
        fieldApprovedCommentCache.close();
        fieldPostIdCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                HomePixComment.Identifier.ID,
                HomePixComment.Identifier.AUTHOR,
                HomePixComment.Identifier.TEXT,
                HomePixComment.Identifier.CREATE_DATE,
                HomePixComment.Identifier.APPROVED_COMMENT,
                HomePixComment.Identifier.POST_ID
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}