package com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.generated;

import com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.AuthGroupPermissions;
import com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.AuthGroupPermissionsEntityStoreSerializerImpl;
import com.elliottbignell.homepix.innodb.innodb.auth_group_permissions.AuthGroupPermissionsManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * AuthGroupPermissionsManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedAuthGroupPermissionsCacheHolder implements EntityStoreHolder<AuthGroupPermissions> {
    
    private final EntityStore<AuthGroupPermissions> entityStore;
    private final OfString fieldIdCache;
    private final OfString fieldGroupIdCache;
    private final OfString fieldPermissionIdCache;
    
    public GeneratedAuthGroupPermissionsCacheHolder(
            EntityStore<AuthGroupPermissions> entityStore,
            OfString fieldIdCache,
            OfString fieldGroupIdCache,
            OfString fieldPermissionIdCache) {
        
        this.entityStore            = requireNonNull(entityStore);
        this.fieldIdCache           = requireNonNull(fieldIdCache);
        this.fieldGroupIdCache      = requireNonNull(fieldGroupIdCache);
        this.fieldPermissionIdCache = requireNonNull(fieldPermissionIdCache);
    }
    
    @Override
    public EntityStore<AuthGroupPermissions> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<AuthGroupPermissions> columnId) {
        if (columnId instanceof AuthGroupPermissions.Identifier) {
            final AuthGroupPermissions.Identifier _id = (AuthGroupPermissions.Identifier) columnId;
            switch (_id) {
                case ID            : return (CACHE) fieldIdCache;
                case GROUP_ID      : return (CACHE) fieldGroupIdCache;
                case PERMISSION_ID : return (CACHE) fieldPermissionIdCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"            : return (CACHE) fieldIdCache;
                case "group_id"      : return (CACHE) fieldGroupIdCache;
                case "permission_id" : return (CACHE) fieldPermissionIdCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<AuthGroupPermissions> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedAuthGroupPermissionsCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            AuthGroupPermissionsEntityStoreSerializerImpl::new,
            TableIdentifier.of("innodb", "innodb", "auth_group_permissions")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<AuthGroupPermissions> recycleAndPersist(PersistOperation<AuthGroupPermissions> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<AuthGroupPermissions> recycleAndRemove(RemoveOperation<AuthGroupPermissions> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<AuthGroupPermissions> recycleAndUpdate(UpdateOperation<AuthGroupPermissions> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<AuthGroupPermissions> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<AuthGroupPermissions>, FieldCache<?>>>of(
            Tuples.of(AuthGroupPermissions.ID,           fieldIdCache),
            Tuples.of(AuthGroupPermissions.GROUP_ID,     fieldGroupIdCache),
            Tuples.of(AuthGroupPermissions.PERMISSION_ID,fieldPermissionIdCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<AuthGroupPermissions>> columnIdentifiers = Stream.<HasIdentifier<AuthGroupPermissions>>of(
            AuthGroupPermissions.ID,
            AuthGroupPermissions.GROUP_ID,
            AuthGroupPermissions.PERMISSION_ID
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedAuthGroupPermissionsCacheHolder> reload(CompletableFuture<EntityStore<AuthGroupPermissions>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfString> fieldIdCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, AuthGroupPermissions.ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldGroupIdCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, AuthGroupPermissions.GROUP_ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldPermissionIdCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, AuthGroupPermissions.PERMISSION_ID, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedAuthGroupPermissionsCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldGroupIdCacheFuture.get(),
                    fieldPermissionIdCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldGroupIdCache.close();
        fieldPermissionIdCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                AuthGroupPermissions.Identifier.ID,
                AuthGroupPermissions.Identifier.GROUP_ID,
                AuthGroupPermissions.Identifier.PERMISSION_ID
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}