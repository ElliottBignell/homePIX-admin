package com.elliottbignell.homepix.innodb.innodb.homepix_comment.generated;

import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixComment;
import com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixCommentImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.elliottbignell.homepix.innodb.innodb.homepix_comment.HomePixComment}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHomePixCommentSqlAdapter implements SqlAdapter<HomePixComment> {
    
    private final TableIdentifier<HomePixComment> tableIdentifier;
    
    protected GeneratedHomePixCommentSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("innodb", "innodb", "homePIX_comment");
    }
    
    protected HomePixComment apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(              getByte(resultSet, 1 + offset))
            .setAuthor(          resultSet.getString(2 + offset))
            .setText(            resultSet.getString(3 + offset))
            .setCreateDate(      resultSet.getTimestamp(4 + offset))
            .setApprovedComment( getByte(resultSet, 5 + offset))
            .setPostId(          getShort(resultSet, 6 + offset))
            ;
    }
    
    protected HomePixCommentImpl createEntity() {
        return new HomePixCommentImpl();
    }
    
    @Override
    public TableIdentifier<HomePixComment> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, HomePixComment> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, HomePixComment> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}