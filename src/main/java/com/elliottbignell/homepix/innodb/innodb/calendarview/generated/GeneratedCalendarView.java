package com.elliottbignell.homepix.innodb.innodb.calendarview.generated;

import com.elliottbignell.homepix.innodb.innodb.calendarview.CalendarView;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.elliottbignell.homepix.innodb.innodb.calendarview.CalendarView}-interface
 * representing entities of the {@code CalendarView}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCalendarView {
    
    /**
     * This Field corresponds to the {@link CalendarView} field that can be
     * obtained using the {@link CalendarView#getId()} method.
     */
    ComparableField<CalendarView, Integer, Integer> ID = DatastoreFields.createComparableField(
        Identifier.ID,
        o -> OptionalUtil.unwrap(o.getId()),
        CalendarView::setId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CalendarView} field that can be
     * obtained using the {@link CalendarView#getFile()} method.
     */
    StringField<CalendarView, String> FILE = DatastoreFields.createStringField(
        Identifier.FILE,
        o -> OptionalUtil.unwrap(o.getFile()),
        CalendarView::setFile,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CalendarView} field that can be
     * obtained using the {@link CalendarView#getSubstrTakenOn011()} method.
     */
    StringField<CalendarView, String> SUBSTR_TAKEN_ON011 = DatastoreFields.createStringField(
        Identifier.SUBSTR_TAKEN_ON011,
        o -> OptionalUtil.unwrap(o.getSubstrTakenOn011()),
        CalendarView::setSubstrTakenOn011,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link CalendarView} field that can be
     * obtained using the {@link CalendarView#getCount()} method.
     */
    ComparableField<CalendarView, Short, Short> COUNT = DatastoreFields.createComparableField(
        Identifier.COUNT,
        o -> OptionalUtil.unwrap(o.getCount()),
        CalendarView::setCount,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this CalendarView. The id field corresponds to the
     * database column innodb.innodb.CalendarView.id.
     * 
     * @return the id of this CalendarView
     */
    OptionalInt getId();
    
    /**
     * Returns the file of this CalendarView. The file field corresponds to the
     * database column innodb.innodb.CalendarView.file.
     * 
     * @return the file of this CalendarView
     */
    Optional<String> getFile();
    
    /**
     * Returns the substrTakenOn011 of this CalendarView. The substrTakenOn011
     * field corresponds to the database column
     * innodb.innodb.CalendarView.substr( taken_on, 0, 11).
     * 
     * @return the substrTakenOn011 of this CalendarView
     */
    Optional<String> getSubstrTakenOn011();
    
    /**
     * Returns the count of this CalendarView. The count field corresponds to
     * the database column innodb.innodb.CalendarView.count.
     * 
     * @return the count of this CalendarView
     */
    Optional<Short> getCount();
    
    /**
     * Sets the id of this CalendarView. The id field corresponds to the
     * database column innodb.innodb.CalendarView.id.
     * 
     * @param id to set of this CalendarView
     * @return   this CalendarView instance
     */
    CalendarView setId(Integer id);
    
    /**
     * Sets the file of this CalendarView. The file field corresponds to the
     * database column innodb.innodb.CalendarView.file.
     * 
     * @param file to set of this CalendarView
     * @return     this CalendarView instance
     */
    CalendarView setFile(String file);
    
    /**
     * Sets the substrTakenOn011 of this CalendarView. The substrTakenOn011
     * field corresponds to the database column
     * innodb.innodb.CalendarView.substr( taken_on, 0, 11).
     * 
     * @param substrTakenOn011 to set of this CalendarView
     * @return                 this CalendarView instance
     */
    CalendarView setSubstrTakenOn011(String substrTakenOn011);
    
    /**
     * Sets the count of this CalendarView. The count field corresponds to the
     * database column innodb.innodb.CalendarView.count.
     * 
     * @param count to set of this CalendarView
     * @return      this CalendarView instance
     */
    CalendarView setCount(Short count);
    
    enum Identifier implements ColumnIdentifier<CalendarView> {
        
        ID                 ("id"),
        FILE               ("file"),
        SUBSTR_TAKEN_ON011 ("substr( taken_on, 0, 11)"),
        COUNT              ("count");
        
        private final String columnId;
        private final TableIdentifier<CalendarView> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "innodb";
        }
        
        @Override
        public String getSchemaId() {
            return "innodb";
        }
        
        @Override
        public String getTableId() {
            return "CalendarView";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<CalendarView> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}