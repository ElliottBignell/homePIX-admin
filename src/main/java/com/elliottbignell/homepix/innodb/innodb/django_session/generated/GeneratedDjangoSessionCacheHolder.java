package com.elliottbignell.homepix.innodb.innodb.django_session.generated;

import com.elliottbignell.homepix.innodb.innodb.django_session.DjangoSession;
import com.elliottbignell.homepix.innodb.innodb.django_session.DjangoSessionEntityStoreSerializerImpl;
import com.elliottbignell.homepix.innodb.innodb.django_session.DjangoSessionManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * DjangoSessionManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedDjangoSessionCacheHolder implements EntityStoreHolder<DjangoSession> {
    
    private final EntityStore<DjangoSession> entityStore;
    private final OfString fieldSessionKeyCache;
    private final OfString fieldSessionDataCache;
    private final OfComparable<Timestamp> fieldExpireDateCache;
    
    public GeneratedDjangoSessionCacheHolder(
            EntityStore<DjangoSession> entityStore,
            OfString fieldSessionKeyCache,
            OfString fieldSessionDataCache,
            OfComparable<Timestamp> fieldExpireDateCache) {
        
        this.entityStore           = requireNonNull(entityStore);
        this.fieldSessionKeyCache  = requireNonNull(fieldSessionKeyCache);
        this.fieldSessionDataCache = requireNonNull(fieldSessionDataCache);
        this.fieldExpireDateCache  = requireNonNull(fieldExpireDateCache);
    }
    
    @Override
    public EntityStore<DjangoSession> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<DjangoSession> columnId) {
        if (columnId instanceof DjangoSession.Identifier) {
            final DjangoSession.Identifier _id = (DjangoSession.Identifier) columnId;
            switch (_id) {
                case SESSION_KEY  : return (CACHE) fieldSessionKeyCache;
                case SESSION_DATA : return (CACHE) fieldSessionDataCache;
                case EXPIRE_DATE  : return (CACHE) fieldExpireDateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "session_key"  : return (CACHE) fieldSessionKeyCache;
                case "session_data" : return (CACHE) fieldSessionDataCache;
                case "expire_date"  : return (CACHE) fieldExpireDateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<DjangoSession> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedDjangoSessionCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            DjangoSessionEntityStoreSerializerImpl::new,
            TableIdentifier.of("innodb", "innodb", "django_session")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<DjangoSession> recycleAndPersist(PersistOperation<DjangoSession> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<DjangoSession> recycleAndRemove(RemoveOperation<DjangoSession> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<DjangoSession> recycleAndUpdate(UpdateOperation<DjangoSession> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<DjangoSession> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<DjangoSession>, FieldCache<?>>>of(
            Tuples.of(DjangoSession.SESSION_KEY, fieldSessionKeyCache),
            Tuples.of(DjangoSession.SESSION_DATA,fieldSessionDataCache),
            Tuples.of(DjangoSession.EXPIRE_DATE, fieldExpireDateCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<DjangoSession>> columnIdentifiers = Stream.<HasIdentifier<DjangoSession>>of(
            DjangoSession.SESSION_KEY,
            DjangoSession.SESSION_DATA,
            DjangoSession.EXPIRE_DATE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedDjangoSessionCacheHolder> reload(CompletableFuture<EntityStore<DjangoSession>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfString> fieldSessionKeyCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, DjangoSession.SESSION_KEY, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldSessionDataCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, DjangoSession.SESSION_DATA, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldExpireDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, DjangoSession.EXPIRE_DATE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedDjangoSessionCacheHolder(
                    entityStore,
                    fieldSessionKeyCacheFuture.get(),
                    fieldSessionDataCacheFuture.get(),
                    fieldExpireDateCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldSessionKeyCache.close();
        fieldSessionDataCache.close();
        fieldExpireDateCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                DjangoSession.Identifier.SESSION_KEY,
                DjangoSession.Identifier.SESSION_DATA,
                DjangoSession.Identifier.EXPIRE_DATE
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}